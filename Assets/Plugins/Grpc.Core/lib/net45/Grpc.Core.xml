<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Grpc.Core</name>
    </assembly>
    <members>
        <member name="T:Grpc.Core.AsyncAuthInterceptor">
            <summary>
            Asynchronous authentication interceptor for <see cref="T:Grpc.Core.CallCredentials"/>.
            </summary>
            <param name="context">The interceptor context.</param>
            <param name="metadata">Metadata to populate with entries that will be added to outgoing call's headers.</param>
            <returns></returns>
        </member>
        <member name="T:Grpc.Core.AuthInterceptorContext">
            <summary>
            Context for an RPC being intercepted by <see cref="T:Grpc.Core.AsyncAuthInterceptor"/>.
            </summary>
        </member>
        <member name="M:Grpc.Core.AuthInterceptorContext.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <c>AuthInterceptorContext</c>.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthInterceptorContext.ServiceUrl">
            <summary>
            The fully qualified service URL for the RPC being called.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthInterceptorContext.MethodName">
            <summary>
            The method name of the RPC being called.
            </summary>
        </member>
        <member name="T:Grpc.Core.AsyncClientStreamingCall`2">
            <summary>
            Return type for client streaming calls.
            </summary>
            <typeparam name="TRequest">Request message type for this call.</typeparam>
            <typeparam name="TResponse">Response message type for this call.</typeparam>
        </member>
        <member name="M:Grpc.Core.AsyncClientStreamingCall`2.#ctor(Grpc.Core.IClientStreamWriter{`0},System.Threading.Tasks.Task{`1},System.Threading.Tasks.Task{Grpc.Core.Metadata},System.Func{Grpc.Core.Status},System.Func{Grpc.Core.Metadata},System.Action)">
            <summary>
            Creates a new AsyncClientStreamingCall object with the specified properties.
            </summary>
            <param name="requestStream">Stream of request values.</param>
            <param name="responseAsync">The response of the asynchronous call.</param>
            <param name="responseHeadersAsync">Response headers of the asynchronous call.</param>
            <param name="getStatusFunc">Delegate returning the status of the call.</param>
            <param name="getTrailersFunc">Delegate returning the trailing metadata of the call.</param>
            <param name="disposeAction">Delegate to invoke when Dispose is called on the call object.</param>
        </member>
        <member name="P:Grpc.Core.AsyncClientStreamingCall`2.ResponseAsync">
            <summary>
            Asynchronous call result.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncClientStreamingCall`2.ResponseHeadersAsync">
            <summary>
            Asynchronous access to response headers.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncClientStreamingCall`2.RequestStream">
            <summary>
            Async stream to send streaming requests.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncClientStreamingCall`2.GetAwaiter">
            <summary>
            Allows awaiting this object directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Grpc.Core.AsyncClientStreamingCall`2.GetStatus">
            <summary>
            Gets the call status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncClientStreamingCall`2.GetTrailers">
            <summary>
            Gets the call trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncClientStreamingCall`2.Dispose">
            <summary>
            Provides means to cleanup after the call.
            If the call has already finished normally (request stream has been completed and call result has been received), doesn't do anything.
            Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call.
            As a result, all resources being used by the call should be released eventually.
            </summary>
            <remarks>
            Normally, there is no need for you to dispose the call unless you want to utilize the
            "Cancel" semantics of invoking <c>Dispose</c>.
            </remarks>
        </member>
        <member name="T:Grpc.Core.AsyncDuplexStreamingCall`2">
            <summary>
            Return type for bidirectional streaming calls.
            </summary>
            <typeparam name="TRequest">Request message type for this call.</typeparam>
            <typeparam name="TResponse">Response message type for this call.</typeparam>
        </member>
        <member name="M:Grpc.Core.AsyncDuplexStreamingCall`2.#ctor(Grpc.Core.IClientStreamWriter{`0},Grpc.Core.IAsyncStreamReader{`1},System.Threading.Tasks.Task{Grpc.Core.Metadata},System.Func{Grpc.Core.Status},System.Func{Grpc.Core.Metadata},System.Action)">
            <summary>
            Creates a new AsyncDuplexStreamingCall object with the specified properties.
            </summary>
            <param name="requestStream">Stream of request values.</param>
            <param name="responseStream">Stream of response values.</param>
            <param name="responseHeadersAsync">Response headers of the asynchronous call.</param>
            <param name="getStatusFunc">Delegate returning the status of the call.</param>
            <param name="getTrailersFunc">Delegate returning the trailing metadata of the call.</param>
            <param name="disposeAction">Delegate to invoke when Dispose is called on the call object.</param>
        </member>
        <member name="P:Grpc.Core.AsyncDuplexStreamingCall`2.ResponseStream">
            <summary>
            Async stream to read streaming responses.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncDuplexStreamingCall`2.RequestStream">
            <summary>
            Async stream to send streaming requests.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncDuplexStreamingCall`2.ResponseHeadersAsync">
            <summary>
            Asynchronous access to response headers.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncDuplexStreamingCall`2.GetStatus">
            <summary>
            Gets the call status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncDuplexStreamingCall`2.GetTrailers">
            <summary>
            Gets the call trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncDuplexStreamingCall`2.Dispose">
            <summary>
            Provides means to cleanup after the call.
            If the call has already finished normally (request stream has been completed and response stream has been fully read), doesn't do anything.
            Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call.
            As a result, all resources being used by the call should be released eventually.
            </summary>
            <remarks>
            Normally, there is no need for you to dispose the call unless you want to utilize the
            "Cancel" semantics of invoking <c>Dispose</c>.
            </remarks>
        </member>
        <member name="T:Grpc.Core.AsyncServerStreamingCall`1">
            <summary>
            Return type for server streaming calls.
            </summary>
            <typeparam name="TResponse">Response message type for this call.</typeparam>
        </member>
        <member name="M:Grpc.Core.AsyncServerStreamingCall`1.#ctor(Grpc.Core.IAsyncStreamReader{`0},System.Threading.Tasks.Task{Grpc.Core.Metadata},System.Func{Grpc.Core.Status},System.Func{Grpc.Core.Metadata},System.Action)">
            <summary>
            Creates a new AsyncDuplexStreamingCall object with the specified properties.
            </summary>
            <param name="responseStream">Stream of response values.</param>
            <param name="responseHeadersAsync">Response headers of the asynchronous call.</param>
            <param name="getStatusFunc">Delegate returning the status of the call.</param>
            <param name="getTrailersFunc">Delegate returning the trailing metadata of the call.</param>
            <param name="disposeAction">Delegate to invoke when Dispose is called on the call object.</param>
        </member>
        <member name="P:Grpc.Core.AsyncServerStreamingCall`1.ResponseStream">
            <summary>
            Async stream to read streaming responses.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncServerStreamingCall`1.ResponseHeadersAsync">
            <summary>
            Asynchronous access to response headers.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncServerStreamingCall`1.GetStatus">
            <summary>
            Gets the call status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncServerStreamingCall`1.GetTrailers">
            <summary>
            Gets the call trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncServerStreamingCall`1.Dispose">
            <summary>
            Provides means to cleanup after the call.
            If the call has already finished normally (response stream has been fully read), doesn't do anything.
            Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call.
            As a result, all resources being used by the call should be released eventually.
            </summary>
            <remarks>
            Normally, there is no need for you to dispose the call unless you want to utilize the
            "Cancel" semantics of invoking <c>Dispose</c>.
            </remarks>
        </member>
        <member name="T:Grpc.Core.AsyncUnaryCall`1">
            <summary>
            Return type for single request - single response call.
            </summary>
            <typeparam name="TResponse">Response message type for this call.</typeparam>
        </member>
        <member name="M:Grpc.Core.AsyncUnaryCall`1.#ctor(System.Threading.Tasks.Task{`0},System.Threading.Tasks.Task{Grpc.Core.Metadata},System.Func{Grpc.Core.Status},System.Func{Grpc.Core.Metadata},System.Action)">
            <summary>
            Creates a new AsyncUnaryCall object with the specified properties.
            </summary>
            <param name="responseAsync">The response of the asynchronous call.</param>
            <param name="responseHeadersAsync">Response headers of the asynchronous call.</param>
            <param name="getStatusFunc">Delegate returning the status of the call.</param>
            <param name="getTrailersFunc">Delegate returning the trailing metadata of the call.</param>
            <param name="disposeAction">Delegate to invoke when Dispose is called on the call object.</param>
        </member>
        <member name="P:Grpc.Core.AsyncUnaryCall`1.ResponseAsync">
            <summary>
            Asynchronous call result.
            </summary>
        </member>
        <member name="P:Grpc.Core.AsyncUnaryCall`1.ResponseHeadersAsync">
            <summary>
            Asynchronous access to response headers.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncUnaryCall`1.GetAwaiter">
            <summary>
            Allows awaiting this object directly.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncUnaryCall`1.GetStatus">
            <summary>
            Gets the call status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncUnaryCall`1.GetTrailers">
            <summary>
            Gets the call trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.AsyncUnaryCall`1.Dispose">
            <summary>
            Provides means to cleanup after the call.
            If the call has already finished normally (request stream has been completed and call result has been received), doesn't do anything.
            Otherwise, requests cancellation of the call which should terminate all pending async operations associated with the call.
            As a result, all resources being used by the call should be released eventually.
            </summary>
            <remarks>
            Normally, there is no need for you to dispose the call unless you want to utilize the
            "Cancel" semantics of invoking <c>Dispose</c>.
            </remarks>
        </member>
        <member name="T:Grpc.Core.AuthContext">
            <summary>
            Authentication context for a call.
            AuthContext is the only reliable source of truth when it comes to authenticating calls.
            Using any other call/context properties for authentication purposes is wrong and inherently unsafe.
            Note: experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="M:Grpc.Core.AuthContext.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Grpc.Core.AuthProperty}})">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.AuthContext"/> class.
            </summary>
            <param name="peerIdentityPropertyName">Peer identity property name.</param>
            <param name="properties">Multimap of auth properties by name.</param>
        </member>
        <member name="P:Grpc.Core.AuthContext.IsPeerAuthenticated">
            <summary>
            Returns <c>true</c> if the peer is authenticated.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthContext.PeerIdentityPropertyName">
            <summary>
            Gets the name of the property that indicates the peer identity. Returns <c>null</c>
            if the peer is not authenticated.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthContext.PeerIdentity">
            <summary>
            Gets properties that represent the peer identity (there can be more than one). Returns an empty collection
            if the peer is not authenticated.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthContext.Properties">
            <summary>
            Gets the auth properties of this context.
            </summary>
        </member>
        <member name="M:Grpc.Core.AuthContext.FindPropertiesByName(System.String)">
            <summary>
            Returns the auth properties with given name (there can be more than one).
            If no properties of given name exist, an empty collection will be returned.
            </summary>
        </member>
        <member name="T:Grpc.Core.AuthProperty">
            <summary>
            A property of an <see cref="T:Grpc.Core.AuthContext"/>.
            Note: experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthProperty.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthProperty.Value">
            <summary>
            Gets the string value of the property.
            </summary>
        </member>
        <member name="P:Grpc.Core.AuthProperty.ValueBytes">
            <summary>
            Gets the binary value of the property.
            </summary>
        </member>
        <member name="M:Grpc.Core.AuthProperty.Create(System.String,System.Byte[])">
            <summary>
            Creates an instance of <c>AuthProperty</c>.
            </summary>
            <param name="name">the name</param>
            <param name="valueBytes">the binary value of the property</param>
        </member>
        <member name="P:Grpc.Core.AuthProperty.ValueBytesUnsafe">
            <summary>
            Gets the binary value of the property (without making a defensive copy).
            </summary>
        </member>
        <member name="M:Grpc.Core.AuthProperty.CreateUnsafe(System.String,System.Byte[])">
            <summary>
            Creates and instance of <c>AuthProperty</c> without making a defensive copy of <c>valueBytes</c>.
            </summary>
        </member>
        <member name="T:Grpc.Core.CallCredentials">
            <summary>
            Client-side call credentials. Provide authorization with per-call granularity.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallCredentials.Compose(Grpc.Core.CallCredentials[])">
            <summary>
            Composes multiple multiple <c>CallCredentials</c> objects into
            a single <c>CallCredentials</c> object.
            </summary>
            <param name="credentials">credentials to compose</param>
            <returns>The new <c>CompositeCallCredentials</c></returns>
        </member>
        <member name="M:Grpc.Core.CallCredentials.FromInterceptor(Grpc.Core.AsyncAuthInterceptor)">
            <summary>
            Creates a new instance of <c>CallCredentials</c> class from an
            interceptor that can attach metadata to outgoing calls.
            </summary>
            <param name="interceptor">authentication interceptor</param>
        </member>
        <member name="M:Grpc.Core.CallCredentials.ToNativeCredentials">
            <summary>
            Creates native object for the credentials.
            </summary>
            <returns>The native credentials.</returns>
        </member>
        <member name="T:Grpc.Core.MetadataCredentials">
            <summary>
            Client-side credentials that delegate metadata based auth to an interceptor.
            The interceptor is automatically invoked for each remote call that uses <c>MetadataCredentials.</c>
            </summary>
        </member>
        <member name="M:Grpc.Core.MetadataCredentials.#ctor(Grpc.Core.AsyncAuthInterceptor)">
            <summary>
            Initializes a new instance of <c>MetadataCredentials</c> class.
            </summary>
            <param name="interceptor">authentication interceptor</param>
        </member>
        <member name="T:Grpc.Core.CompositeCallCredentials">
            <summary>
            Credentials that allow composing multiple credentials objects into one <see cref="T:Grpc.Core.CallCredentials"/> object.
            </summary>
        </member>
        <member name="M:Grpc.Core.CompositeCallCredentials.#ctor(Grpc.Core.CallCredentials[])">
            <summary>
            Initializes a new instance of <c>CompositeCallCredentials</c> class.
            The resulting credentials object will be composite of all the credentials specified as parameters.
            </summary>
            <param name="credentials">credentials to compose</param>
        </member>
        <member name="T:Grpc.Core.CallInvocationDetails`2">
            <summary>
            Details about a client-side call to be invoked.
            </summary>
            <typeparam name="TRequest">Request message type for the call.</typeparam>
            <typeparam name="TResponse">Response message type for the call.</typeparam>
        </member>
        <member name="M:Grpc.Core.CallInvocationDetails`2.#ctor(Grpc.Core.Channel,Grpc.Core.Method{`0,`1},Grpc.Core.CallOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.CallInvocationDetails`2"/> struct.
            </summary>
            <param name="channel">Channel to use for this call.</param>
            <param name="method">Method to call.</param>
            <param name="options">Call options.</param>
        </member>
        <member name="M:Grpc.Core.CallInvocationDetails`2.#ctor(Grpc.Core.Channel,Grpc.Core.Method{`0,`1},System.String,Grpc.Core.CallOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.CallInvocationDetails`2"/> struct.
            </summary>
            <param name="channel">Channel to use for this call.</param>
            <param name="method">Method to call.</param>
            <param name="host">Host that contains the method. if <c>null</c>, default host will be used.</param>
            <param name="options">Call options.</param>
        </member>
        <member name="M:Grpc.Core.CallInvocationDetails`2.#ctor(Grpc.Core.Channel,System.String,System.String,Grpc.Core.Marshaller{`0},Grpc.Core.Marshaller{`1},Grpc.Core.CallOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.CallInvocationDetails`2"/> struct.
            </summary>
            <param name="channel">Channel to use for this call.</param>
            <param name="method">Qualified method name.</param>
            <param name="host">Host that contains the method.</param>
            <param name="requestMarshaller">Request marshaller.</param>
            <param name="responseMarshaller">Response marshaller.</param>
            <param name="options">Call options.</param>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.Channel">
            <summary>
            Get channel associated with this call.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.Method">
            <summary>
            Gets name of method to be called.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.Host">
            <summary>
            Get name of host.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.RequestMarshaller">
            <summary>
            Gets marshaller used to serialize requests.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.ResponseMarshaller">
            <summary>
            Gets marshaller used to deserialized responses.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallInvocationDetails`2.Options">
            <summary>
            Gets the call options.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallInvocationDetails`2.WithOptions(Grpc.Core.CallOptions)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallInvocationDetails`2"/> with
            <c>Options</c> set to the value provided. Values of all other fields are preserved.
            </summary>
        </member>
        <member name="T:Grpc.Core.CallInvoker">
            <summary>
            Abstraction of client-side RPC invocation.
            </summary>
            <seealso cref="T:Grpc.Core.Calls"/>
        </member>
        <member name="M:Grpc.Core.CallInvoker.BlockingUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)">
            <summary>
            Invokes a simple remote call in a blocking fashion.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallInvoker.AsyncUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)">
            <summary>
            Invokes a simple remote call asynchronously.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallInvoker.AsyncServerStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)">
            <summary>
            Invokes a server streaming call asynchronously.
            In server streaming scenario, client sends on request and server responds with a stream of responses.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallInvoker.AsyncClientStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)">
            <summary>
            Invokes a client streaming call asynchronously.
            In client streaming scenario, client sends a stream of requests and server responds with a single response.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallInvoker.AsyncDuplexStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)">
            <summary>
            Invokes a duplex streaming call asynchronously.
            In duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses.
            The response stream is completely independent and both side can be sending messages at the same time.
            </summary>
        </member>
        <member name="T:Grpc.Core.CallOptions">
            <summary>
            Options for calls made by client.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallOptions.#ctor(Grpc.Core.Metadata,System.Nullable{System.DateTime},System.Threading.CancellationToken,Grpc.Core.WriteOptions,Grpc.Core.ContextPropagationToken,Grpc.Core.CallCredentials)">
            <summary>
            Creates a new instance of <c>CallOptions</c> struct.
            </summary>
            <param name="headers">Headers to be sent with the call.</param>
            <param name="deadline">Deadline for the call to finish. null means no deadline.</param>
            <param name="cancellationToken">Can be used to request cancellation of the call.</param>
            <param name="writeOptions">Write options that will be used for this call.</param>
            <param name="propagationToken">Context propagation token obtained from <see cref="T:Grpc.Core.ServerCallContext"/>.</param>
            <param name="credentials">Credentials to use for this call.</param>
        </member>
        <member name="P:Grpc.Core.CallOptions.Headers">
            <summary>
            Headers to send at the beginning of the call.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.Deadline">
            <summary>
            Call deadline.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.CancellationToken">
            <summary>
            Token that can be used for cancelling the call on the client side.
            Cancelling the token will request cancellation
            of the remote call. Best effort will be made to deliver the cancellation
            notification to the server and interaction of the call with the server side
            will be terminated. Unless the call finishes before the cancellation could
            happen (there is an inherent race),
            the call will finish with <c>StatusCode.Cancelled</c> status.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.WriteOptions">
            <summary>
            Write options that will be used for this call.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.PropagationToken">
            <summary>
            Token for propagating parent call context.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.Credentials">
            <summary>
            Credentials to use for this call.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.IsWaitForReady">
            <summary>
            If <c>true</c> and and channel is in <c>ChannelState.TransientFailure</c>, the call will attempt waiting for the channel to recover
            instead of failing immediately (which is the default "FailFast" semantics).
            Note: experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="P:Grpc.Core.CallOptions.Flags">
            <summary>
            Flags to use for this call.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithHeaders(Grpc.Core.Metadata)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>Headers</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="headers">The headers.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithDeadline(System.DateTime)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>Deadline</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="deadline">The deadline.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>CancellationToken</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithWriteOptions(Grpc.Core.WriteOptions)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>WriteOptions</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="writeOptions">The write options.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithPropagationToken(Grpc.Core.ContextPropagationToken)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>PropagationToken</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="propagationToken">The context propagation token.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithCredentials(Grpc.Core.CallCredentials)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>Credentials</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="credentials">The call credentials.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithWaitForReady(System.Boolean)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with "WaitForReady" semantics enabled/disabled.
            <see cref="P:Grpc.Core.CallOptions.IsWaitForReady"/>.
            Note: experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="M:Grpc.Core.CallOptions.WithFlags(Grpc.Core.Internal.CallFlags)">
            <summary>
            Returns new instance of <see cref="T:Grpc.Core.CallOptions"/> with
            <c>Flags</c> set to the value provided. Values of all other fields are preserved.
            </summary>
            <param name="flags">The call flags.</param>
        </member>
        <member name="M:Grpc.Core.CallOptions.Normalize">
            <summary>
            Returns a new instance of <see cref="T:Grpc.Core.CallOptions"/> with 
            all previously unset values set to their defaults and deadline and cancellation
            token propagated when appropriate.
            </summary>
        </member>
        <member name="T:Grpc.Core.Calls">
            <summary>
            Helper methods for generated clients to make RPC calls.
            Most users will use this class only indirectly and will be 
            making calls using client object generated from protocol
            buffer definition files.
            </summary>
        </member>
        <member name="M:Grpc.Core.Calls.BlockingUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)">
            <summary>
            Invokes a simple remote call in a blocking fashion.
            </summary>
            <returns>The response.</returns>
            <param name="call">The call defintion.</param>
            <param name="req">Request message.</param>
            <typeparam name="TRequest">Type of request message.</typeparam>
            <typeparam name="TResponse">The of response message.</typeparam>
        </member>
        <member name="M:Grpc.Core.Calls.AsyncUnaryCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)">
            <summary>
            Invokes a simple remote call asynchronously.
            </summary>
            <returns>An awaitable call object providing access to the response.</returns>
            <param name="call">The call defintion.</param>
            <param name="req">Request message.</param>
            <typeparam name="TRequest">Type of request message.</typeparam>
            <typeparam name="TResponse">The of response message.</typeparam>
        </member>
        <member name="M:Grpc.Core.Calls.AsyncServerStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1},``0)">
            <summary>
            Invokes a server streaming call asynchronously.
            In server streaming scenario, client sends on request and server responds with a stream of responses.
            </summary>
            <returns>A call object providing access to the asynchronous response stream.</returns>
            <param name="call">The call defintion.</param>
            <param name="req">Request message.</param>
            <typeparam name="TRequest">Type of request message.</typeparam>
            <typeparam name="TResponse">The of response messages.</typeparam>
        </member>
        <member name="M:Grpc.Core.Calls.AsyncClientStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})">
            <summary>
            Invokes a client streaming call asynchronously.
            In client streaming scenario, client sends a stream of requests and server responds with a single response.
            </summary>
            <param name="call">The call defintion.</param>
            <returns>An awaitable call object providing access to the response.</returns>
            <typeparam name="TRequest">Type of request messages.</typeparam>
            <typeparam name="TResponse">The of response message.</typeparam>
        </member>
        <member name="M:Grpc.Core.Calls.AsyncDuplexStreamingCall``2(Grpc.Core.CallInvocationDetails{``0,``1})">
            <summary>
            Invokes a duplex streaming call asynchronously.
            In duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses.
            The response stream is completely independent and both side can be sending messages at the same time.
            </summary>
            <returns>A call object providing access to the asynchronous request and response streams.</returns>
            <param name="call">The call definition.</param>
            <typeparam name="TRequest">Type of request messages.</typeparam>
            <typeparam name="TResponse">Type of reponse messages.</typeparam>
        </member>
        <member name="T:Grpc.Core.Channel">
            <summary>
            Represents a gRPC channel. Channels are an abstraction of long-lived connections to remote servers.
            More client objects can reuse the same channel. Creating a channel is an expensive operation compared to invoking
            a remote call so in general you should reuse a single channel for as many calls as possible.
            </summary>
        </member>
        <member name="M:Grpc.Core.Channel.#ctor(System.String,Grpc.Core.ChannelCredentials)">
            <summary>
            Creates a channel that connects to a specific host.
            Port will default to 80 for an unsecure channel and to 443 for a secure channel.
            </summary>
            <param name="target">Target of the channel.</param>
            <param name="credentials">Credentials to secure the channel.</param>
        </member>
        <member name="M:Grpc.Core.Channel.#ctor(System.String,Grpc.Core.ChannelCredentials,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})">
            <summary>
            Creates a channel that connects to a specific host.
            Port will default to 80 for an unsecure channel and to 443 for a secure channel.
            </summary>
            <param name="target">Target of the channel.</param>
            <param name="credentials">Credentials to secure the channel.</param>
            <param name="options">Channel options.</param>
        </member>
        <member name="M:Grpc.Core.Channel.#ctor(System.String,System.Int32,Grpc.Core.ChannelCredentials)">
            <summary>
            Creates a channel that connects to a specific host and port.
            </summary>
            <param name="host">The name or IP address of the host.</param>
            <param name="port">The port.</param>
            <param name="credentials">Credentials to secure the channel.</param>
        </member>
        <member name="M:Grpc.Core.Channel.#ctor(System.String,System.Int32,Grpc.Core.ChannelCredentials,System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})">
            <summary>
            Creates a channel that connects to a specific host and port.
            </summary>
            <param name="host">The name or IP address of the host.</param>
            <param name="port">The port.</param>
            <param name="credentials">Credentials to secure the channel.</param>
            <param name="options">Channel options.</param>
        </member>
        <member name="P:Grpc.Core.Channel.State">
            <summary>
            Gets current connectivity state of this channel.
            After channel is has been shutdown, <c>ChannelState.Shutdown</c> will be returned.
            </summary>
        </member>
        <member name="M:Grpc.Core.Channel.WaitForStateChangedAsync(Grpc.Core.ChannelState,System.Nullable{System.DateTime})">
            <summary>
            Returned tasks completes once channel state has become different from 
            given lastObservedState. 
            If deadline is reached or and error occurs, returned task is cancelled.
            </summary>
        </member>
        <member name="M:Grpc.Core.Channel.TryWaitForStateChangedAsync(Grpc.Core.ChannelState,System.Nullable{System.DateTime})">
            <summary>
            Returned tasks completes once channel state has become different from
            given lastObservedState (<c>true</c> is returned) or if the wait has timed out (<c>false</c> is returned).
            </summary>
        </member>
        <member name="P:Grpc.Core.Channel.ResolvedTarget">
            <summary>Resolved address of the remote endpoint in URI format.</summary>
        </member>
        <member name="P:Grpc.Core.Channel.Target">
            <summary>The original target used to create the channel.</summary>
        </member>
        <member name="P:Grpc.Core.Channel.ShutdownToken">
            <summary>
            Returns a token that gets cancelled once <c>ShutdownAsync</c> is invoked.
            </summary>
        </member>
        <member name="M:Grpc.Core.Channel.ConnectAsync(System.Nullable{System.DateTime})">
            <summary>
            Allows explicitly requesting channel to connect without starting an RPC.
            Returned task completes once state Ready was seen. If the deadline is reached,
            or channel enters the Shutdown state, the task is cancelled.
            There is no need to call this explicitly unless your use case requires that.
            Starting an RPC on a new channel will request connection implicitly.
            </summary>
            <param name="deadline">The deadline. <c>null</c> indicates no deadline.</param>
        </member>
        <member name="M:Grpc.Core.Channel.ShutdownAsync">
            <summary>
            Shuts down the channel cleanly. It is strongly recommended to shutdown
            all previously created channels before exiting from the process.
            </summary>
            <remarks>
            This method doesn't wait for all calls on this channel to finish (nor does
            it explicitly cancel all outstanding calls). It is user's responsibility to make sure
            all the calls on this channel have finished (successfully or with an error)
            before shutting down the channel to ensure channel shutdown won't impact
            the outcome of those remote calls.
            </remarks>
        </member>
        <member name="T:Grpc.Core.ChannelCredentials">
            <summary>
            Client-side channel credentials. Used for creation of a secure channel.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelCredentials.#ctor">
            <summary>
            Creates a new instance of channel credentials
            </summary>
        </member>
        <member name="P:Grpc.Core.ChannelCredentials.Insecure">
            <summary>
            Returns instance of credentials that provides no security and 
            will result in creating an unsecure channel with no encryption whatsoever.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelCredentials.Create(Grpc.Core.ChannelCredentials,Grpc.Core.CallCredentials)">
            <summary>
            Creates a new instance of <c>ChannelCredentials</c> class by composing
            given channel credentials with call credentials.
            </summary>
            <param name="channelCredentials">Channel credentials.</param>
            <param name="callCredentials">Call credentials.</param>
            <returns>The new composite <c>ChannelCredentials</c></returns>
        </member>
        <member name="M:Grpc.Core.ChannelCredentials.GetNativeCredentials">
            <summary>
            Gets native object for the credentials, creating one if it already doesn't exist. May return null if insecure channel
            should be created. Caller must not call <c>Dispose()</c> on the returned native credentials as their lifetime
            is managed by this class (and instances of native credentials are cached).
            </summary>
            <returns>The native credentials.</returns>
        </member>
        <member name="M:Grpc.Core.ChannelCredentials.CreateNativeCredentials">
            <summary>
            Creates a new native object for the credentials. May return null if insecure channel
            should be created. For internal use only, use <see cref="M:Grpc.Core.ChannelCredentials.GetNativeCredentials"/> instead.
            </summary>
            <returns>The native credentials.</returns>
        </member>
        <member name="P:Grpc.Core.ChannelCredentials.IsComposable">
            <summary>
            Returns <c>true</c> if this credential type allows being composed by <c>CompositeCredentials</c>.
            </summary>
        </member>
        <member name="T:Grpc.Core.SslCredentials">
            <summary>
            Client-side SSL credentials.
            </summary>
        </member>
        <member name="M:Grpc.Core.SslCredentials.#ctor">
            <summary>
            Creates client-side SSL credentials loaded from
            disk file pointed to by the GRPC_DEFAULT_SSL_ROOTS_FILE_PATH environment variable.
            If that fails, gets the roots certificates from a well known place on disk.
            </summary>
        </member>
        <member name="M:Grpc.Core.SslCredentials.#ctor(System.String)">
            <summary>
            Creates client-side SSL credentials from
            a string containing PEM encoded root certificates.
            </summary>
        </member>
        <member name="M:Grpc.Core.SslCredentials.#ctor(System.String,Grpc.Core.KeyCertificatePair)">
            <summary>
            Creates client-side SSL credentials.
            </summary>
            <param name="rootCertificates">string containing PEM encoded server root certificates.</param>
            <param name="keyCertificatePair">a key certificate pair.</param>
        </member>
        <member name="P:Grpc.Core.SslCredentials.RootCertificates">
            <summary>
            PEM encoding of the server root certificates.
            </summary>
        </member>
        <member name="P:Grpc.Core.SslCredentials.KeyCertificatePair">
            <summary>
            Client side key and certificate pair.
            If null, client will not use key and certificate pair.
            </summary>
        </member>
        <member name="T:Grpc.Core.CompositeChannelCredentials">
            <summary>
            Credentials that allow composing one <see cref="T:Grpc.Core.ChannelCredentials"/> object and 
            one or more <see cref="T:Grpc.Core.CallCredentials"/> objects into a single <see cref="T:Grpc.Core.ChannelCredentials"/>.
            </summary>
        </member>
        <member name="M:Grpc.Core.CompositeChannelCredentials.#ctor(Grpc.Core.ChannelCredentials,Grpc.Core.CallCredentials)">
            <summary>
            Initializes a new instance of <c>CompositeChannelCredentials</c> class.
            The resulting credentials object will be composite of all the credentials specified as parameters.
            </summary>
            <param name="channelCredentials">channelCredentials to compose</param>
            <param name="callCredentials">channelCredentials to compose</param>
        </member>
        <member name="T:Grpc.Core.ChannelOption">
            <summary>
            Channel option specified when creating a channel.
            Corresponds to grpc_channel_args from grpc/grpc.h.
            Commonly used channel option names are defined in <c>ChannelOptions</c>,
            but any of the GRPC_ARG_* channel options names defined in grpc_types.h can be used.
            </summary>
        </member>
        <member name="T:Grpc.Core.ChannelOption.OptionType">
            <summary>
            Type of <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelOption.OptionType.Integer">
            <summary>
            Channel option with integer value.
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelOption.OptionType.String">
            <summary>
            Channel option with string value.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelOption.#ctor(System.String,System.String)">
            <summary>
            Creates a channel option with a string value.
            </summary>
            <param name="name">Name.</param>
            <param name="stringValue">String value.</param>
        </member>
        <member name="M:Grpc.Core.ChannelOption.#ctor(System.String,System.Int32)">
            <summary>
            Creates a channel option with an integer value.
            </summary>
            <param name="name">Name.</param>
            <param name="intValue">Integer value.</param>
        </member>
        <member name="P:Grpc.Core.ChannelOption.Type">
            <summary>
            Gets the type of the <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="P:Grpc.Core.ChannelOption.Name">
            <summary>
            Gets the name of the <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="P:Grpc.Core.ChannelOption.IntValue">
            <summary>
            Gets the integer value the <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="P:Grpc.Core.ChannelOption.StringValue">
            <summary>
            Gets the string value the <c>ChannelOption</c>.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelOption.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelOption.Equals(Grpc.Core.ChannelOption)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelOption.GetHashCode">
            <summary>
            A hash code for the current object.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelOption.op_Equality(Grpc.Core.ChannelOption,Grpc.Core.ChannelOption)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:Grpc.Core.ChannelOption.op_Inequality(Grpc.Core.ChannelOption,Grpc.Core.ChannelOption)">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="T:Grpc.Core.ChannelOptions">
            <summary>
            Defines names of most commonly used channel options.
            Other supported options names can be found in grpc_types.h (GRPC_ARG_* definitions)
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.SslTargetNameOverride">
            <summary>Override SSL target check. Only to be used for testing.</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.Census">
            <summary>Enable census for tracing and stats collection</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.MaxConcurrentStreams">
            <summary>Maximum number of concurrent incoming streams to allow on a http2 connection</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.MaxReceiveMessageLength">
            <summary>Maximum message length that the channel can receive</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.MaxSendMessageLength">
            <summary>Maximum message length that the channel can send</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.MaxMessageLength">
            <summary>Obsolete, for backward compatibility only.</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.Http2InitialSequenceNumber">
            <summary>Initial sequence number for http2 transports</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.DefaultAuthority">
            <summary>Default authority for calls.</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.PrimaryUserAgentString">
            <summary>Primary user agent: goes at the start of the user-agent metadata</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.SecondaryUserAgentString">
            <summary>Secondary user agent: goes at the end of the user-agent metadata</summary>
        </member>
        <member name="F:Grpc.Core.ChannelOptions.SoReuseport">
            <summary>If non-zero, allow the use of SO_REUSEPORT for server if it's available (default 1)</summary>
        </member>
        <member name="M:Grpc.Core.ChannelOptions.CreateChannelArgs(System.Collections.Generic.ICollection{Grpc.Core.ChannelOption})">
            <summary>
            Creates native object for a collection of channel options.
            </summary>
            <returns>The native channel arguments.</returns>
        </member>
        <member name="T:Grpc.Core.ChannelState">
            <summary>
            Connectivity state of a channel.
            Based on grpc_connectivity_state from grpc/grpc.h
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.Idle">
            <summary>
            Channel is idle
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.Connecting">
            <summary>
            Channel is connecting
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.Ready">
            <summary>
            Channel is ready for work
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.TransientFailure">
            <summary>
            Channel has seen a failure but expects to recover
            </summary>
        </member>
        <member name="F:Grpc.Core.ChannelState.Shutdown">
            <summary>
            Channel has seen a failure that it cannot recover from
            </summary>
        </member>
        <member name="T:Grpc.Core.ClientBase`1">
            <summary>
            Generic base class for client-side stubs.
            </summary>
        </member>
        <member name="M:Grpc.Core.ClientBase`1.#ctor">
            <summary>
            Initializes a new instance of <c>ClientBase</c> class that
            throws <c>NotImplementedException</c> upon invocation of any RPC.
            This constructor is only provided to allow creation of test doubles
            for client classes (e.g. mocking requires a parameterless constructor).
            </summary>
        </member>
        <member name="M:Grpc.Core.ClientBase`1.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>
            Initializes a new instance of <c>ClientBase</c> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Grpc.Core.ClientBase`1.#ctor(Grpc.Core.Channel)">
            <summary>
            Initializes a new instance of <c>ClientBase</c> class.
            </summary>
            <param name="channel">The channel to use for remote call invocation.</param>
        </member>
        <member name="M:Grpc.Core.ClientBase`1.#ctor(Grpc.Core.CallInvoker)">
            <summary>
            Initializes a new instance of <c>ClientBase</c> class.
            </summary>
            <param name="callInvoker">The <c>CallInvoker</c> for remote call invocation.</param>
        </member>
        <member name="M:Grpc.Core.ClientBase`1.WithHost(System.String)">
            <summary>
            Creates a new client that sets host field for calls explicitly.
            gRPC supports multiple "hosts" being served by a single server.
            By default (if a client was not created by calling this method),
            host <c>null</c> with the meaning "use default host" is used.
            </summary>
        </member>
        <member name="M:Grpc.Core.ClientBase`1.NewInstance(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>
            Creates a new instance of client from given <c>ClientBaseConfiguration</c>.
            </summary>
        </member>
        <member name="T:Grpc.Core.ClientBase">
            <summary>
            Base class for client-side stubs.
            </summary>
        </member>
        <member name="M:Grpc.Core.ClientBase.#ctor">
            <summary>
            Initializes a new instance of <c>ClientBase</c> class that
            throws <c>NotImplementedException</c> upon invocation of any RPC.
            This constructor is only provided to allow creation of test doubles
            for client classes (e.g. mocking requires a parameterless constructor).
            </summary>
        </member>
        <member name="M:Grpc.Core.ClientBase.#ctor(Grpc.Core.ClientBase.ClientBaseConfiguration)">
            <summary>
            Initializes a new instance of <c>ClientBase</c> class.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Grpc.Core.ClientBase.#ctor(Grpc.Core.Channel)">
            <summary>
            Initializes a new instance of <c>ClientBase</c> class.
            </summary>
            <param name="channel">The channel to use for remote call invocation.</param>
        </member>
        <member name="M:Grpc.Core.ClientBase.#ctor(Grpc.Core.CallInvoker)">
            <summary>
            Initializes a new instance of <c>ClientBase</c> class.
            </summary>
            <param name="callInvoker">The <c>CallInvoker</c> for remote call invocation.</param>
        </member>
        <member name="P:Grpc.Core.ClientBase.CallInvoker">
            <summary>
            Gets the call invoker.
            </summary>
        </member>
        <member name="P:Grpc.Core.ClientBase.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="T:Grpc.Core.ClientBase.ClientBaseConfiguration">
            <summary>
            Represents configuration of ClientBase. The class itself is visible to
            subclasses, but contents are marked as internal to make the instances opaque.
            The verbose name of this class was chosen to make name clash in generated code 
            less likely.
            </summary>
        </member>
        <member name="M:Grpc.Core.ClientBase.ClientBaseConfiguration.ClientBaseConfigurationInterceptor.#ctor(System.Func{Grpc.Core.IMethod,System.String,Grpc.Core.CallOptions,Grpc.Core.ClientBase.ClientBaseConfiguration.ClientBaseConfigurationInfo})">
            <summary>
            Creates a new instance of ClientBaseConfigurationInterceptor given the specified header and host interceptor function.
            </summary>
        </member>
        <member name="T:Grpc.Core.CompressionLevel">
            <summary>
            Compression level based on grpc_compression_level from grpc/compression.h
            </summary>
        </member>
        <member name="F:Grpc.Core.CompressionLevel.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:Grpc.Core.CompressionLevel.Low">
            <summary>
            Low compression.
            </summary>
        </member>
        <member name="F:Grpc.Core.CompressionLevel.Medium">
            <summary>
            Medium compression.
            </summary>
        </member>
        <member name="F:Grpc.Core.CompressionLevel.High">
            <summary>
            High compression.
            </summary>
        </member>
        <member name="T:Grpc.Core.ContextPropagationToken">
            <summary>
            Token for propagating context of server side handlers to child calls.
            In situations when a backend is making calls to another backend,
            it makes sense to propagate properties like deadline and cancellation 
            token of the server call to the child call.
            The gRPC native layer provides some other contexts (like tracing context) that
            are not accessible to explicitly C# layer, but this token still allows propagating them.
            </summary>
        </member>
        <member name="F:Grpc.Core.ContextPropagationToken.DefaultCoreMask">
            <summary>
            Default propagation mask used by C core.
            </summary>
        </member>
        <member name="F:Grpc.Core.ContextPropagationToken.DefaultMask">
            <summary>
            Default propagation mask used by C# - we want to propagate deadline 
            and cancellation token by our own means.
            </summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationToken.ParentCall">
            <summary>
            Gets the native handle of the parent call.
            </summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationToken.ParentDeadline">
            <summary>
            Gets the parent call's deadline.
            </summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationToken.ParentCancellationToken">
            <summary>
            Gets the parent call's cancellation token.
            </summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationToken.Options">
            <summary>
            Get the context propagation options.
            </summary>
        </member>
        <member name="T:Grpc.Core.ContextPropagationOptions">
            <summary>
            Options for <see cref="T:Grpc.Core.ContextPropagationToken"/>.
            </summary>
        </member>
        <member name="F:Grpc.Core.ContextPropagationOptions.Default">
            <summary>
            The context propagation options that will be used by default.
            </summary>
        </member>
        <member name="M:Grpc.Core.ContextPropagationOptions.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates new context propagation options.
            </summary>
            <param name="propagateDeadline">If set to <c>true</c> parent call's deadline will be propagated to the child call.</param>
            <param name="propagateCancellation">If set to <c>true</c> parent call's cancellation token will be propagated to the child call.</param>
        </member>
        <member name="P:Grpc.Core.ContextPropagationOptions.IsPropagateDeadline">
            <summary><c>true</c> if parent call's deadline should be propagated to the child call.</summary>
        </member>
        <member name="P:Grpc.Core.ContextPropagationOptions.IsPropagateCancellation">
            <summary><c>true</c> if parent call's cancellation token should be propagated to the child call.</summary>
        </member>
        <member name="T:Grpc.Core.ContextPropagationFlags">
            <summary>
            Context propagation flags from grpc/grpc.h.
            </summary>
        </member>
        <member name="T:Grpc.Core.DefaultCallInvoker">
            <summary>
            Invokes client RPCs using <see cref="T:Grpc.Core.Calls"/>.
            </summary>
        </member>
        <member name="M:Grpc.Core.DefaultCallInvoker.#ctor(Grpc.Core.Channel)">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.DefaultCallInvoker"/> class.
            </summary>
            <param name="channel">Channel to use.</param>
        </member>
        <member name="M:Grpc.Core.DefaultCallInvoker.BlockingUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)">
            <summary>
            Invokes a simple remote call in a blocking fashion.
            </summary>
        </member>
        <member name="M:Grpc.Core.DefaultCallInvoker.AsyncUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)">
            <summary>
            Invokes a simple remote call asynchronously.
            </summary>
        </member>
        <member name="M:Grpc.Core.DefaultCallInvoker.AsyncServerStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)">
            <summary>
            Invokes a server streaming call asynchronously.
            In server streaming scenario, client sends on request and server responds with a stream of responses.
            </summary>
        </member>
        <member name="M:Grpc.Core.DefaultCallInvoker.AsyncClientStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)">
            <summary>
            Invokes a client streaming call asynchronously.
            In client streaming scenario, client sends a stream of requests and server responds with a single response.
            </summary>
        </member>
        <member name="M:Grpc.Core.DefaultCallInvoker.AsyncDuplexStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)">
            <summary>
            Invokes a duplex streaming call asynchronously.
            In duplex streaming scenario, client sends a stream of requests and server responds with a stream of responses.
            The response stream is completely independent and both side can be sending messages at the same time.
            </summary>
        </member>
        <member name="M:Grpc.Core.DefaultCallInvoker.CreateCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)">
            <summary>Creates call invocation details for given method.</summary>
        </member>
        <member name="T:Grpc.Core.DeserializationContext">
            <summary>
            Provides access to the payload being deserialized when deserializing messages.
            </summary>
        </member>
        <member name="P:Grpc.Core.DeserializationContext.PayloadLength">
            <summary>
            Get the total length of the payload in bytes.
            </summary>
        </member>
        <member name="M:Grpc.Core.DeserializationContext.PayloadAsNewBuffer">
            <summary>
            Gets the entire payload as a newly allocated byte array.
            Once the byte array is returned, the byte array becomes owned by the caller and won't be ever accessed or reused by gRPC again.
            NOTE: Obtaining the buffer as a newly allocated byte array is the simplest way of accessing the payload,
            but it can have important consequences in high-performance scenarios.
            In particular, using this method usually requires copying of the entire buffer one extra time.
            Also, allocating a new buffer each time can put excessive pressure on GC, especially if
            the payload is more than 86700 bytes large (which means the newly allocated buffer will be placed in LOH,
            and LOH object can only be garbage collected via a full ("stop the world") GC run).
            NOTE: Deserializers are expected not to call this method more than once per received message
            (as there is no practical reason for doing so) and <c>DeserializationContext</c> implementations are free to assume so.
            </summary>
            <returns>byte array containing the entire payload.</returns>
        </member>
        <member name="T:Grpc.Core.GrpcEnvironment">
            <summary>
            Encapsulates initialization and shutdown of gRPC library.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.AddRef">
            <summary>
            Returns a reference-counted instance of initialized gRPC environment.
            Subsequent invocations return the same instance unless reference count has dropped to zero previously.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.ReleaseAsync">
            <summary>
            Decrements the reference count for currently active environment and asynchronously shuts down the gRPC environment if reference count drops to zero.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.ShutdownChannelsAsync">
            <summary>
            Requests shutdown of all channels created by the current process.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.KillServersAsync">
            <summary>
            Requests immediate shutdown of all servers created by the current process.
            </summary>
        </member>
        <member name="P:Grpc.Core.GrpcEnvironment.Logger">
            <summary>
            Gets application-wide logger used by gRPC.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.SetLogger(Grpc.Core.Logging.ILogger)">
            <summary>
            Sets the application-wide logger that should be used by gRPC.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.SetThreadPoolSize(System.Int32)">
            <summary>
            Sets the number of threads in the gRPC thread pool that polls for internal RPC events.
            Can be only invoked before the <c>GrpcEnviroment</c> is started and cannot be changed afterwards.
            Setting thread pool size is an advanced setting and you should only use it if you know what you are doing.
            Most users should rely on the default value provided by gRPC library.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.SetCompletionQueueCount(System.Int32)">
            <summary>
            Sets the number of completion queues in the  gRPC thread pool that polls for internal RPC events.
            Can be only invoked before the <c>GrpcEnviroment</c> is started and cannot be changed afterwards.
            Setting the number of completions queues is an advanced setting and you should only use it if you know what you are doing.
            Most users should rely on the default value provided by gRPC library.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.SetHandlerInlining(System.Boolean)">
            <summary>
            By default, gRPC's internal event handlers get offloaded to .NET default thread pool thread (<c>inlineHandlers=false</c>).
            Setting <c>inlineHandlers</c> to <c>true</c> will allow scheduling the event handlers directly to
            <c>GrpcThreadPool</c> internal threads. That can lead to significant performance gains in some situations,
            but requires user to never block in async code (incorrectly written code can easily lead to deadlocks).
            Inlining handlers is an advanced setting and you should only use it if you know what you are doing.
            Most users should rely on the default value provided by gRPC library.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.
            Note: <c>inlineHandlers=true</c> was the default in gRPC C# v1.4.x and earlier.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.SetBatchContextPoolParams(System.Int32,System.Int32)">
            <summary>
            Sets the parameters for a pool that caches batch context instances. Reusing batch context instances
            instead of creating a new one for every C core operation helps reducing the GC pressure.
            Can be only invoked before the <c>GrpcEnviroment</c> is started and cannot be changed afterwards.
            This is an advanced setting and you should only use it if you know what you are doing.
            Most users should rely on the default value provided by gRPC library.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.SetRequestCallContextPoolParams(System.Int32,System.Int32)">
            <summary>
            Sets the parameters for a pool that caches request call context instances. Reusing request call context instances
            instead of creating a new one for every requested call in C core helps reducing the GC pressure.
            Can be only invoked before the <c>GrpcEnviroment</c> is started and cannot be changed afterwards.
            This is an advanced setting and you should only use it if you know what you are doing.
            Most users should rely on the default value provided by gRPC library.
            Note: this method is part of an experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="E:Grpc.Core.GrpcEnvironment.ShuttingDown">
            <summary>
            Occurs when <c>GrpcEnvironment</c> is about the start the shutdown logic.
            If <c>GrpcEnvironment</c> is later initialized and shutdown, the event will be fired again (unless unregistered first).
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.#ctor">
            <summary>
            Creates gRPC environment.
            </summary>
        </member>
        <member name="P:Grpc.Core.GrpcEnvironment.CompletionQueues">
            <summary>
            Gets the completion queues used by this gRPC environment.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.PickCompletionQueue">
            <summary>
            Picks a completion queue in a round-robin fashion.
            Shouldn't be invoked on a per-call basis (used at per-channel basis).
            </summary>
        </member>
        <member name="P:Grpc.Core.GrpcEnvironment.DebugStats">
            <summary>
            Gets the completion queue used by this gRPC environment.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.GetCoreVersionString">
            <summary>
            Gets version of gRPC C core.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.ShutdownAsync">
            <summary>
            Shuts down this environment.
            </summary>
        </member>
        <member name="M:Grpc.Core.GrpcEnvironment.ShutdownHooks.HandleShutdown">
            <summary>
            Handler for AppDomain.DomainUnload, AppDomain.ProcessExit and AssemblyLoadContext.Unloading hooks.
            </summary>
        </member>
        <member name="T:Grpc.Core.IAsyncStreamReader`1">
            <summary>
            A stream of messages to be read.
            Messages can be awaited <c>await reader.MoveNext()</c>, that returns <c>true</c>
            if there is a message available and <c>false</c> if there are no more messages
            (i.e. the stream has been closed).
            <para>
            On the client side, the last invocation of <c>MoveNext()</c> either returns <c>false</c>
            if the call has finished successfully or throws <c>RpcException</c> if call finished
            with an error. Once the call finishes, subsequent invocations of <c>MoveNext()</c> will
            continue yielding the same result (returning <c>false</c> or throwing an exception).
            </para>
            <para>
            On the server side, <c>MoveNext()</c> does not throw exceptions.
            In case of a failure, the request stream will appear to be finished
            (<c>MoveNext</c> will return <c>false</c>) and the <c>CancellationToken</c>
            associated with the call will be cancelled to signal the failure.
            </para>
            <para>
            <c>MoveNext()</c> operations can be cancelled via a cancellation token. Cancelling
            an individual read operation has the same effect as cancelling the entire call
            (which will also result in the read operation returning prematurely), but the per-read cancellation
            tokens passed to MoveNext() only result in cancelling the call if the read operation haven't finished
            yet.
            </para>
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="T:Grpc.Core.IAsyncStreamWriter`1">
            <summary>
            A writable stream of messages.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="M:Grpc.Core.IAsyncStreamWriter`1.WriteAsync(`0)">
            <summary>
            Writes a single asynchronously. Only one write can be pending at a time.
            </summary>
            <param name="message">the message to be written. Cannot be null.</param>
        </member>
        <member name="P:Grpc.Core.IAsyncStreamWriter`1.WriteOptions">
            <summary>
            Write options that will be used for the next write.
            If null, default options will be used.
            Once set, this property maintains its value across subsequent
            writes.
            </summary>
        </member>
        <member name="T:Grpc.Core.IClientStreamWriter`1">
            <summary>
            Client-side writable stream of messages with Close capability.
            </summary>
            <typeparam name="T">The message type.</typeparam>
        </member>
        <member name="M:Grpc.Core.IClientStreamWriter`1.CompleteAsync">
            <summary>
            Completes/closes the stream. Can only be called once there is no pending write. No writes should follow calling this.
            </summary>
        </member>
        <member name="T:Grpc.Core.Interceptors.CallInvokerExtensions">
            <summary>
            Extends the CallInvoker class to provide the interceptor facility on the client side.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.CallInvokerExtensions.Intercept(Grpc.Core.CallInvoker,Grpc.Core.Interceptors.Interceptor)">
            <summary>
            Returns a <see cref="T:Grpc.Core.CallInvoker" /> instance that intercepts
            the invoker with the given interceptor.
            </summary>
            <param name="invoker">The underlying invoker to intercept.</param>
            <param name="interceptor">The interceptor to intercept calls to the invoker with.</param>
            <remarks>
            Multiple interceptors can be added on top of each other by calling
            "invoker.Intercept(a, b, c)".  The order of invocation will be "a", "b", and then "c".
            Interceptors can be later added to an existing intercepted CallInvoker, effectively
            building a chain like "invoker.Intercept(c).Intercept(b).Intercept(a)".  Note that
            in this case, the last interceptor added will be the first to take control.
            </remarks>
        </member>
        <member name="M:Grpc.Core.Interceptors.CallInvokerExtensions.Intercept(Grpc.Core.CallInvoker,Grpc.Core.Interceptors.Interceptor[])">
            <summary>
            Returns a <see cref="T:Grpc.Core.CallInvoker" /> instance that intercepts
            the invoker with the given interceptors.
            </summary>
            <param name="invoker">The channel to intercept.</param>
            <param name="interceptors">
            An array of interceptors to intercept the calls to the invoker with.
            Control is passed to the interceptors in the order specified.
            </param>
            <remarks>
            Multiple interceptors can be added on top of each other by calling
            "invoker.Intercept(a, b, c)".  The order of invocation will be "a", "b", and then "c".
            Interceptors can be later added to an existing intercepted CallInvoker, effectively
            building a chain like "invoker.Intercept(c).Intercept(b).Intercept(a)".  Note that
            in this case, the last interceptor added will be the first to take control.
            </remarks>
        </member>
        <member name="M:Grpc.Core.Interceptors.CallInvokerExtensions.Intercept(Grpc.Core.CallInvoker,System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata})">
            <summary>
            Returns a <see cref="T:Grpc.Core.CallInvoker" /> instance that intercepts
            the invoker with the given interceptor.
            </summary>
            <param name="invoker">The underlying invoker to intercept.</param>
            <param name="interceptor">
            An interceptor delegate that takes the request metadata to be sent with an outgoing call
            and returns a <see cref="T:Grpc.Core.Metadata" /> instance that will replace the existing
            invocation metadata.
            </param>
            <remarks>
            Multiple interceptors can be added on top of each other by
            building a chain like "invoker.Intercept(c).Intercept(b).Intercept(a)".  Note that
            in this case, the last interceptor added will be the first to take control.
            </remarks>
        </member>
        <member name="M:Grpc.Core.Interceptors.CallInvokerExtensions.MetadataInterceptor.#ctor(System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata})">
            <summary>
            Creates a new instance of MetadataInterceptor given the specified interceptor function.
            </summary>
        </member>
        <member name="T:Grpc.Core.Interceptors.ChannelExtensions">
            <summary>
            Provides extension methods to make it easy to register interceptors on Channel objects.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor)">
            <summary>
            Returns a <see cref="T:Grpc.Core.CallInvoker" /> instance that intercepts
            the channel with the given interceptor.
            </summary>
            <param name="channel">The channel to intercept.</param>
            <param name="interceptor">The interceptor to intercept the channel with.</param>
            <remarks>
            Multiple interceptors can be added on top of each other by calling
            "channel.Intercept(a, b, c)".  The order of invocation will be "a", "b", and then "c".
            Interceptors can be later added to an existing intercepted channel, effectively
            building a chain like "channel.Intercept(c).Intercept(b).Intercept(a)".  Note that
            in this case, the last interceptor added will be the first to take control.
            </remarks>
        </member>
        <member name="M:Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,Grpc.Core.Interceptors.Interceptor[])">
            <summary>
            Returns a <see cref="T:Grpc.Core.CallInvoker" /> instance that intercepts
            the channel with the given interceptors.
            </summary>
            <param name="channel">The channel to intercept.</param>
            <param name="interceptors">
            An array of interceptors to intercept the channel with.
            Control is passed to the interceptors in the order specified.
            </param>
            <remarks>
            Multiple interceptors can be added on top of each other by calling
            "channel.Intercept(a, b, c)".  The order of invocation will be "a", "b", and then "c".
            Interceptors can be later added to an existing intercepted channel, effectively
            building a chain like "channel.Intercept(c).Intercept(b).Intercept(a)".  Note that
            in this case, the last interceptor added will be the first to take control.
            </remarks>
        </member>
        <member name="M:Grpc.Core.Interceptors.ChannelExtensions.Intercept(Grpc.Core.Channel,System.Func{Grpc.Core.Metadata,Grpc.Core.Metadata})">
            <summary>
            Returns a <see cref="T:Grpc.Core.CallInvoker" /> instance that intercepts
            the invoker with the given interceptor.
            </summary>
            <param name="channel">The channel to intercept.</param>
            <param name="interceptor">
            An interceptor delegate that takes the request metadata to be sent with an outgoing call
            and returns a <see cref="T:Grpc.Core.Metadata" /> instance that will replace the existing
            invocation metadata.
            </param>
            <remarks>
            Multiple interceptors can be added on top of each other by
            building a chain like "channel.Intercept(c).Intercept(b).Intercept(a)".  Note that
            in this case, the last interceptor added will be the first to take control.
            </remarks>
        </member>
        <member name="T:Grpc.Core.Interceptors.ClientInterceptorContext`2">
            <summary>
            Carries along the context associated with intercepted invocations on the client side.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.ClientInterceptorContext`2.#ctor(Grpc.Core.Method{`0,`1},System.String,Grpc.Core.CallOptions)">
            <summary>
            Creates a new instance of <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2" />
            with the specified method, host, and call options.
            </summary>
            <param name="method">A <see cref="T:Grpc.Core.Method`2"/> object representing the method to be invoked.</param>
            <param name="host">The host to dispatch the current call to.</param>
            <param name="options">A <see cref="T:Grpc.Core.CallOptions"/> instance containing the call options of the current call.</param>
        </member>
        <member name="P:Grpc.Core.Interceptors.ClientInterceptorContext`2.Method">
            <summary>
            Gets the <see cref="T:Grpc.Core.Method`2"/> instance
            representing the method to be invoked.
            </summary>
        </member>
        <member name="P:Grpc.Core.Interceptors.ClientInterceptorContext`2.Host">
            <summary>
            Gets the host that the currect invocation will be dispatched to.
            </summary>
        </member>
        <member name="P:Grpc.Core.Interceptors.ClientInterceptorContext`2.Options">
            <summary>
            Gets the <see cref="T:Grpc.Core.CallOptions"/> structure representing the
            call options associated with the current invocation.
            </summary>
        </member>
        <member name="T:Grpc.Core.Interceptors.InterceptingCallInvoker">
            <summary>
            Decorates an underlying <see cref="T:Grpc.Core.CallInvoker" /> to
            intercept calls through a given interceptor.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.InterceptingCallInvoker.#ctor(Grpc.Core.CallInvoker,Grpc.Core.Interceptors.Interceptor)">
            <summary>
            Creates a new instance of <see cref="T:Grpc.Core.Interceptors.InterceptingCallInvoker" />
            with the given underlying invoker and interceptor instances.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.InterceptingCallInvoker.BlockingUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)">
            <summary>
            Intercepts a simple blocking call with the registered interceptor.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.InterceptingCallInvoker.AsyncUnaryCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)">
            <summary>
            Intercepts a simple asynchronous call with the registered interceptor.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.InterceptingCallInvoker.AsyncServerStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions,``0)">
            <summary>
            Intercepts an asynchronous server streaming call with the registered interceptor.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.InterceptingCallInvoker.AsyncClientStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)">
            <summary>
            Intercepts an asynchronous client streaming call with the registered interceptor.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.InterceptingCallInvoker.AsyncDuplexStreamingCall``2(Grpc.Core.Method{``0,``1},System.String,Grpc.Core.CallOptions)">
            <summary>
            Intercepts an asynchronous duplex streaming call with the registered interceptor.
            </summary>
        </member>
        <member name="T:Grpc.Core.Interceptors.Interceptor">
            <summary>
            Serves as the base class for gRPC interceptors.
            </summary>
        </member>
        <member name="T:Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation`2">
            <summary>
            Represents a continuation for intercepting simple blocking invocations.
            A delegate of this type is passed to the BlockingUnaryCall method
            when an outgoing invocation is being intercepted and calling the
            delegate will invoke the next interceptor in the chain, or the underlying
            call invoker if called from the last interceptor. The interceptor is
            allowed to call it zero, one, or multiple times, passing it the appropriate
            context and request values as it sees fit.
            </summary>
            <typeparam name="TRequest">Request message type for this invocation.</typeparam>
            <typeparam name="TResponse">Response message type for this invocation.</typeparam>
            <param name="request">The request value to continue the invocation with.</param>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            instance to pass to the next step in the invocation process.
            </param>
            <returns>
            The response value of the invocation to return to the caller.
            The interceptor can choose to return the return value of the
            continuation delegate or an arbitrary value as it sees fit.
            </returns>
        </member>
        <member name="T:Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation`2">
            <summary>
            Represents a continuation for intercepting simple asynchronous invocations.
            A delegate of this type is passed to the AsyncUnaryCall method
            when an outgoing invocation is being intercepted and calling the
            delegate will invoke the next interceptor in the chain, or the underlying
            call invoker if called from the last interceptor. The interceptor is
            allowed to call it zero, one, or multiple times, passing it the appropriate
            request value and context as it sees fit.
            </summary>
            <typeparam name="TRequest">Request message type for this invocation.</typeparam>
            <typeparam name="TResponse">Response message type for this invocation.</typeparam>
            <param name="request">The request value to continue the invocation with.</param>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            instance to pass to the next step in the invocation process.
            </param>
            <returns>
            An instance of <see cref="T:Grpc.Core.AsyncUnaryCall`1" />
            representing an asynchronous invocation of a unary RPC.
            The interceptor can choose to return the same object returned from
            the continuation delegate or an arbitrarily constructed instance as it sees fit.
            </returns>
        </member>
        <member name="T:Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation`2">
            <summary>
            Represents a continuation for intercepting asynchronous server-streaming invocations.
            A delegate of this type is passed to the AsyncServerStreamingCall method
            when an outgoing invocation is being intercepted and calling the
            delegate will invoke the next interceptor in the chain, or the underlying
            call invoker if called from the last interceptor. The interceptor is
            allowed to call it zero, one, or multiple times, passing it the appropriate
            request value and context as it sees fit.
            </summary>
            <typeparam name="TRequest">Request message type for this invocation.</typeparam>
            <typeparam name="TResponse">Response message type for this invocation.</typeparam>
            <param name="request">The request value to continue the invocation with.</param>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            instance to pass to the next step in the invocation process.
            </param>
            <returns>
            An instance of <see cref="T:Grpc.Core.AsyncServerStreamingCall`1" />
            representing an asynchronous invocation of a server-streaming RPC.
            The interceptor can choose to return the same object returned from
            the continuation delegate or an arbitrarily constructed instance as it sees fit.
            </returns>
        </member>
        <member name="T:Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation`2">
            <summary>
            Represents a continuation for intercepting asynchronous client-streaming invocations.
            A delegate of this type is passed to the AsyncClientStreamingCall method
            when an outgoing invocation is being intercepted and calling the
            delegate will invoke the next interceptor in the chain, or the underlying
            call invoker if called from the last interceptor. The interceptor is
            allowed to call it zero, one, or multiple times, passing it the appropriate
            request value and context as it sees fit.
            </summary>
            <typeparam name="TRequest">Request message type for this invocation.</typeparam>
            <typeparam name="TResponse">Response message type for this invocation.</typeparam>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            instance to pass to the next step in the invocation process.
            </param>
            <returns>
            An instance of <see cref="T:Grpc.Core.AsyncClientStreamingCall`2" />
            representing an asynchronous invocation of a client-streaming RPC.
            The interceptor can choose to return the same object returned from
            the continuation delegate or an arbitrarily constructed instance as it sees fit.
            </returns>
        </member>
        <member name="T:Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation`2">
            <summary>
            Represents a continuation for intercepting asynchronous duplex invocations.
            A delegate of this type is passed to the AsyncDuplexStreamingCall method
            when an outgoing invocation is being intercepted and calling the
            delegate will invoke the next interceptor in the chain, or the underlying
            call invoker if called from the last interceptor. The interceptor is
            allowed to call it zero, one, or multiple times, passing it the appropriate
            request value and context as it sees fit.
            </summary>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            instance to pass to the next step in the invocation process.
            </param>
            <returns>
            An instance of <see cref="T:Grpc.Core.AsyncDuplexStreamingCall`2" />
            representing an asynchronous invocation of a duplex-streaming RPC.
            The interceptor can choose to return the same object returned from
            the continuation delegate or an arbitrarily constructed instance as it sees fit.
            </returns>
        </member>
        <member name="M:Grpc.Core.Interceptors.Interceptor.BlockingUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.BlockingUnaryCallContinuation{``0,``1})">
            <summary>
            Intercepts a blocking invocation of a simple remote call.
            </summary>
            <param name="request">The request message of the invocation.</param>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            associated with the current invocation.
            </param>
            <param name="continuation">
            The callback that continues the invocation process.
            This can be invoked zero or more times by the interceptor.
            The interceptor can invoke the continuation passing the given
            request value and context arguments, or substitute them as it sees fit.
            </param>
            <returns>
            The response message of the current invocation.
            The interceptor can simply return the return value of the
            continuation delegate passed to it intact, or an arbitrary
            value as it sees fit.
            </returns>
        </member>
        <member name="M:Grpc.Core.Interceptors.Interceptor.AsyncUnaryCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncUnaryCallContinuation{``0,``1})">
            <summary>
            Intercepts an asynchronous invocation of a simple remote call.
            </summary>
            <param name="request">The request message of the invocation.</param>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            associated with the current invocation.
            </param>
            <param name="continuation">
            The callback that continues the invocation process.
            This can be invoked zero or more times by the interceptor.
            The interceptor can invoke the continuation passing the given
            request value and context arguments, or substitute them as it sees fit.
            </param>
            <returns>
            An instance of <see cref="T:Grpc.Core.AsyncUnaryCall`1" />
            representing an asynchronous unary invocation.
            The interceptor can simply return the return value of the
            continuation delegate passed to it intact, or construct its
            own substitute as it sees fit.
            </returns>
        </member>
        <member name="M:Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCall``2(``0,Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncServerStreamingCallContinuation{``0,``1})">
            <summary>
            Intercepts an asynchronous invocation of a streaming remote call.
            </summary>
            <param name="request">The request message of the invocation.</param>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            associated with the current invocation.
            </param>
            <param name="continuation">
            The callback that continues the invocation process.
            This can be invoked zero or more times by the interceptor.
            The interceptor can invoke the continuation passing the given
            request value and context arguments, or substitute them as it sees fit.
            </param>
            <returns>
            An instance of <see cref="T:Grpc.Core.AsyncServerStreamingCall`1" />
            representing an asynchronous server-streaming invocation.
            The interceptor can simply return the return value of the
            continuation delegate passed to it intact, or construct its
            own substitute as it sees fit.
            </returns>
        </member>
        <member name="M:Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncClientStreamingCallContinuation{``0,``1})">
            <summary>
            Intercepts an asynchronous invocation of a client streaming call.
            </summary>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            associated with the current invocation.
            </param>
            <param name="continuation">
            The callback that continues the invocation process.
            This can be invoked zero or more times by the interceptor.
            The interceptor can invoke the continuation passing the given
            context argument, or substitute as it sees fit.
            </param>
            <returns>
            An instance of <see cref="T:Grpc.Core.AsyncClientStreamingCall`2" />
            representing an asynchronous client-streaming invocation.
            The interceptor can simply return the return value of the
            continuation delegate passed to it intact, or construct its
            own substitute as it sees fit.
            </returns>
        </member>
        <member name="M:Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCall``2(Grpc.Core.Interceptors.ClientInterceptorContext{``0,``1},Grpc.Core.Interceptors.Interceptor.AsyncDuplexStreamingCallContinuation{``0,``1})">
            <summary>
            Intercepts an asynchronous invocation of a duplex streaming call.
            </summary>
            <param name="context">
            The <see cref="T:Grpc.Core.Interceptors.ClientInterceptorContext`2"/>
            associated with the current invocation.
            </param>
            <param name="continuation">
            The callback that continues the invocation process.
            This can be invoked zero or more times by the interceptor.
            The interceptor can invoke the continuation passing the given
            context argument, or substitute as it sees fit.
            </param>
            <returns>
            An instance of <see cref="T:Grpc.Core.AsyncDuplexStreamingCall`2" />
            representing an asynchronous duplex-streaming invocation.
            The interceptor can simply return the return value of the
            continuation delegate passed to it intact, or construct its
            own substitute as it sees fit.
            </returns>
        </member>
        <member name="M:Grpc.Core.Interceptors.Interceptor.UnaryServerHandler``2(``0,Grpc.Core.ServerCallContext,Grpc.Core.UnaryServerMethod{``0,``1})">
            <summary>
            Server-side handler for intercepting and incoming unary call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
            <param name="request">The request value of the incoming invocation.</param>
            <param name="context">
            An instance of <see cref="T:Grpc.Core.ServerCallContext" /> representing
            the context of the invocation.
            </param>
            <param name="continuation">
            A delegate that asynchronously proceeds with the invocation, calling
            the next interceptor in the chain, or the service request handler,
            in case of the last interceptor and return the response value of
            the RPC. The interceptor can choose to call it zero or more times
            at its discretion.
            </param>
            <returns>
            A future representing the response value of the RPC. The interceptor
            can simply return the return value from the continuation intact,
            or an arbitrary response value as it sees fit.
            </returns>
        </member>
        <member name="M:Grpc.Core.Interceptors.Interceptor.ClientStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.ServerCallContext,Grpc.Core.ClientStreamingServerMethod{``0,``1})">
            <summary>
            Server-side handler for intercepting client streaming call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
            <param name="requestStream">The request stream of the incoming invocation.</param>
            <param name="context">
            An instance of <see cref="T:Grpc.Core.ServerCallContext" /> representing
            the context of the invocation.
            </param>
            <param name="continuation">
            A delegate that asynchronously proceeds with the invocation, calling
            the next interceptor in the chain, or the service request handler,
            in case of the last interceptor and return the response value of
            the RPC. The interceptor can choose to call it zero or more times
            at its discretion.
            </param>
            <returns>
            A future representing the response value of the RPC. The interceptor
            can simply return the return value from the continuation intact,
            or an arbitrary response value as it sees fit. The interceptor has
            the ability to wrap or substitute the request stream when calling
            the continuation.
            </returns>
        </member>
        <member name="M:Grpc.Core.Interceptors.Interceptor.ServerStreamingServerHandler``2(``0,Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.ServerStreamingServerMethod{``0,``1})">
            <summary>
            Server-side handler for intercepting server streaming call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
            <param name="request">The request value of the incoming invocation.</param>
            <param name="responseStream">The response stream of the incoming invocation.</param>
            <param name="context">
            An instance of <see cref="T:Grpc.Core.ServerCallContext" /> representing
            the context of the invocation.
            </param>
            <param name="continuation">
            A delegate that asynchronously proceeds with the invocation, calling
            the next interceptor in the chain, or the service request handler,
            in case of the last interceptor and the interceptor can choose to
            call it zero or more times at its discretion. The interceptor has
            the ability to wrap or substitute the request value and the response stream
            when calling the continuation.
            </param>
        </member>
        <member name="M:Grpc.Core.Interceptors.Interceptor.DuplexStreamingServerHandler``2(Grpc.Core.IAsyncStreamReader{``0},Grpc.Core.IServerStreamWriter{``1},Grpc.Core.ServerCallContext,Grpc.Core.DuplexStreamingServerMethod{``0,``1})">
            <summary>
            Server-side handler for intercepting bidirectional streaming calls.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
            <param name="requestStream">The request stream of the incoming invocation.</param>
            <param name="responseStream">The response stream of the incoming invocation.</param>
            <param name="context">
            An instance of <see cref="T:Grpc.Core.ServerCallContext" /> representing
            the context of the invocation.
            </param>
            <param name="continuation">
            A delegate that asynchronously proceeds with the invocation, calling
            the next interceptor in the chain, or the service request handler,
            in case of the last interceptor and the interceptor can choose to
            call it zero or more times at its discretion. The interceptor has
            the ability to wrap or substitute the request and response streams
            when calling the continuation.
            </param>
        </member>
        <member name="T:Grpc.Core.Interceptors.ServerServiceDefinitionExtensions">
            <summary>
            Extends the ServerServiceDefinition class to add methods used to register interceptors on the server side.
            </summary>
        </member>
        <member name="M:Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor)">
            <summary>
            Returns a <see cref="T:Grpc.Core.ServerServiceDefinition" /> instance that
            intercepts incoming calls to the underlying service handler through the given interceptor.
            </summary>
            <param name="serverServiceDefinition">The <see cref="T:Grpc.Core.ServerServiceDefinition" /> instance to register interceptors on.</param>
            <param name="interceptor">The interceptor to intercept the incoming invocations with.</param>
            <remarks>
            Multiple interceptors can be added on top of each other by calling
            "serverServiceDefinition.Intercept(a, b, c)".  The order of invocation will be "a", "b", and then "c".
            Interceptors can be later added to an existing intercepted service definition, effectively
            building a chain like "serverServiceDefinition.Intercept(c).Intercept(b).Intercept(a)".  Note that
            in this case, the last interceptor added will be the first to take control.
            </remarks>
        </member>
        <member name="M:Grpc.Core.Interceptors.ServerServiceDefinitionExtensions.Intercept(Grpc.Core.ServerServiceDefinition,Grpc.Core.Interceptors.Interceptor[])">
            <summary>
            Returns a <see cref="T:Grpc.Core.ServerServiceDefinition" /> instance that
            intercepts incoming calls to the underlying service handler through the given interceptors.
            </summary>
            <param name="serverServiceDefinition">The <see cref="T:Grpc.Core.ServerServiceDefinition" /> instance to register interceptors on.</param>
            <param name="interceptors">
            An array of interceptors to intercept the incoming invocations with.
            Control is passed to the interceptors in the order specified.
            </param>
            <remarks>
            Multiple interceptors can be added on top of each other by calling
            "serverServiceDefinition.Intercept(a, b, c)".  The order of invocation will be "a", "b", and then "c".
            Interceptors can be later added to an existing intercepted service definition, effectively
            building a chain like "serverServiceDefinition.Intercept(c).Intercept(b).Intercept(a)".  Note that
            in this case, the last interceptor added will be the first to take control.
            </remarks>
        </member>
        <member name="T:Grpc.Core.Internal.AsyncCall`2">
            <summary>
            Manages client side native call lifecycle.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.#ctor(Grpc.Core.CallInvocationDetails{`0,`1},Grpc.Core.Internal.INativeCall)">
            <summary>
            This constructor should only be used for testing.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.UnaryCall(`0)">
            <summary>
            Blocking unary request - unary response call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.UnaryCallAsync(`0)">
            <summary>
            Starts a unary request - unary response call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.ClientStreamingCallAsync">
            <summary>
            Starts a streamed request - unary response call.
            Use StartSendMessage and StartSendCloseFromClient to stream requests.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.StartServerStreamingCall(`0)">
            <summary>
            Starts a unary request - streamed response call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.StartDuplexStreamingCall">
            <summary>
            Starts a streaming request - streaming response call.
            Use StartSendMessage and StartSendCloseFromClient to stream requests.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.SendMessageAsync(`0,Grpc.Core.WriteFlags)">
            <summary>
            Sends a streaming request. Only one pending send action is allowed at any given time.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.ReadMessageAsync">
            <summary>
            Receives a streaming response. Only one pending read action is allowed at any given time.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.SendCloseFromClientAsync">
            <summary>
            Sends halfclose, indicating client is done with streaming requests.
            Only one pending send action is allowed at any given time.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.AsyncCall`2.StreamingResponseCallFinishedTask">
            <summary>
            Get the task that completes once if streaming response call finishes with ok status and throws RpcException with given status otherwise.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.AsyncCall`2.ResponseHeadersAsync">
            <summary>
            Get the task that completes once response headers are received.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.GetStatus">
            <summary>
            Gets the resulting status if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.GetTrailers">
            <summary>
            Gets the trailing metadata if the call has already finished.
            Throws InvalidOperationException otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.GetWriteFlagsForCall">
            <summary>
            Gets WriteFlags set in callDetails.Options.WriteOptions
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.HandleReceivedResponseHeaders(System.Boolean,Grpc.Core.Metadata)">
            <summary>
            Handles receive status completion for calls with streaming response.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.HandleUnaryResponse(System.Boolean,Grpc.Core.Internal.ClientSideStatus,System.Byte[],Grpc.Core.Metadata)">
            <summary>
            Handler for unary response completion.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCall`2.HandleFinished(System.Boolean,Grpc.Core.Internal.ClientSideStatus)">
            <summary>
            Handles receive status completion for calls with streaming response.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AsyncCallBase`2">
            <summary>
            Base for handling both client side and server side calls.
            Manages native call lifecycle and provides convenience methods.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.Cancel">
            <summary>
            Requests cancelling the call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.CancelWithStatus(Grpc.Core.Status)">
            <summary>
            Requests cancelling the call with given status.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.SendMessageInternalAsync(`0,Grpc.Core.WriteFlags)">
            <summary>
            Initiates sending a message. Only one send operation can be active at a time.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.ReadMessageInternalAsync">
            <summary>
            Initiates reading a message. Only one read operation can be active at a time.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.ReleaseResourcesIfPossible">
            <summary>
            If there are no more pending actions and no new actions can be started, releases
            the underlying native resources.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.GetRpcExceptionClientOnly">
            <summary>
            Returns an exception to throw for a failed send operation.
            It is only allowed to call this method for a call that has already finished.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.CheckSendAllowedOrEarlyResult">
            <summary>
            Checks if sending is allowed and possibly returns a Task that allows short-circuiting the send
            logic by directly returning the write operation result task. Normally, null is returned.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.HandleSendFinished(System.Boolean)">
            <summary>
            Handles send completion (including SendCloseFromClient).
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.HandleSendStatusFromServerFinished(System.Boolean)">
            <summary>
            Handles send status from server completion.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallBase`2.HandleReadFinished(System.Boolean,System.Byte[])">
            <summary>
            Handles streaming read completion.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AsyncCallServer`2">
            <summary>
            Manages server side native call lifecycle.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.InitializeForTesting(Grpc.Core.Internal.INativeCall)">
            <summary>
            Only for testing purposes.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.ServerSideCallAsync">
            <summary>
            Starts a server side call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.SendMessageAsync(`1,Grpc.Core.WriteFlags)">
            <summary>
            Sends a streaming response. Only one pending send action is allowed at any given time.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.ReadMessageAsync">
            <summary>
            Receives a streaming request. Only one pending read action is allowed at any given time.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.SendInitialMetadataAsync(Grpc.Core.Metadata)">
            <summary>
            Initiates sending a initial metadata. 
            Even though C-core allows sending metadata in parallel to sending messages, we will treat sending metadata as a send message operation
            to make things simpler.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.SendStatusFromServerAsync(Grpc.Core.Status,Grpc.Core.Metadata,System.Nullable{Grpc.Core.Internal.AsyncCallServer{`0,`1}.ResponseWithFlags})">
            <summary>
            Sends call result status, indicating we are done with writes.
            Sending a status different from StatusCode.OK will also implicitly cancel the call.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.AsyncCallServer`2.CancellationToken">
            <summary>
            Gets cancellation token that gets cancelled once close completion
            is received and the cancelled flag is set.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AsyncCallServer`2.HandleFinishedServerside(System.Boolean,System.Boolean)">
            <summary>
            Handles the server side close completion.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AuthContextSafeHandle">
            <summary>
            grpc_auth_context
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.AuthContextSafeHandle.ToAuthContext">
            <summary>
            Copies contents of the native auth context into a new <c>AuthContext</c> instance.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AuthContextSafeHandle.NativeAuthProperty">
            <summary>
            grpc_auth_property
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.AuthContextSafeHandle.NativeAuthPropertyIterator">
            <summary>
            grpc_auth_property_iterator
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.BatchContextSafeHandle">
            <summary>
            grpcsharp_batch_context
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CallCredentialsSafeHandle">
            <summary>
            grpc_call_credentials from <c>grpc/grpc_security.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CallError">
            <summary>
            grpc_call_error from grpc/grpc.h
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.CallErrorExtensions.CheckOk(Grpc.Core.Internal.CallError)">
            <summary>
            Checks the call API invocation's result is OK.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CallFlags">
            <summary>
            Flags to enable special call behaviors (client-side only).
            </summary>
        </member>
        <member name="F:Grpc.Core.Internal.CallFlags.IdempotentRequest">
            <summary>
            The call is idempotent (retrying the call doesn't change the outcome of the operation).
            </summary>
        </member>
        <member name="F:Grpc.Core.Internal.CallFlags.WaitForReady">
            <summary>
            If channel is in <c>ChannelState.TransientFailure</c>, attempt waiting for the channel to recover
            instead of failing the call immediately.
            </summary>
        </member>
        <member name="F:Grpc.Core.Internal.CallFlags.CacheableRequest">
            <summary>
            The call is cacheable. gRPC is free to use GET verb */
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CallSafeHandle">
            <summary>
            grpc_call from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.CallSafeHandle.CreateFake(System.IntPtr,Grpc.Core.Internal.CompletionQueueSafeHandle)">
            <summary>
            Only for testing.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ChannelArgsSafeHandle">
            <summary>
            grpc_channel_args from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ChannelCredentialsSafeHandle">
            <summary>
            grpc_channel_credentials from <c>grpc/grpc_security.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ChannelSafeHandle">
            <summary>
            grpc_channel from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ClientRequestStream`2">
            <summary>
            Writes requests asynchronously to an underlying AsyncCall object.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ClientSideStatus">
            <summary>
            Status + metadata received on client side when call finishes.
            (when receive_status_on_client operation finishes).
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ClockType">
            <summary>
            gpr_clock_type from grpc/support/time.h
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CompletionQueueEvent">
            <summary>
            grpc_event from grpc/grpc.h
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CompletionQueueEvent.CompletionType">
            <summary>
            grpc_completion_type from grpc/grpc.h
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CompletionQueueSafeHandle">
            <summary>
            grpc_completion_queue from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.CompletionQueueSafeHandle.CreateSync">
            <summary>
            Create a completion queue that can only be used for Pluck operations.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.CompletionQueueSafeHandle.CreateAsync(Grpc.Core.Internal.CompletionRegistry)">
            <summary>
            Create a completion queue that can only be used for Next operations.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.CompletionQueueSafeHandle.NewScope">
            <summary>
            Creates a new usage scope for this completion queue. Once successfully created,
            the completion queue won't be shutdown before scope.Dispose() is called.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.CompletionQueueSafeHandle.CompletionRegistry">
            <summary>
            Completion registry associated with this completion queue.
            Doesn't need to be set if only using Pluck() operations.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.CompletionRegistry.LastRegisteredKey">
            <summary>
            For testing purposes only. NOT threadsafe.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CompletionRegistry.IntPtrComparer">
            <summary>
            IntPtr doesn't implement <c>IEquatable{IntPtr}</c> so we need to use custom comparer to avoid boxing.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.CStringSafeHandle">
            <summary>
            Owned char* object.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.DebugStats.CheckOK">
            <summary>
            Checks the debug stats and take action for any inconsistency found.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.DefaultObjectPool`1">
            <summary>
            Pool of objects that combines a shared pool and a thread local pool.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.DefaultObjectPool`1.#ctor(System.Func{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <c>DefaultObjectPool</c> with given shared capacity and thread local capacity.
            Thread local capacity should be significantly smaller than the shared capacity as we don't guarantee immediately
            disposing the objects in the thread local pool after this pool is disposed (they will eventually be garbage collected
            after the thread that owns them has finished).
            On average, the shared pool will only be accessed approx. once for every <c>threadLocalCapacity / 2</c> rent or lease
            operations.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.DefaultObjectPool`1.Lease">
            <summary>
            Leases an item from the pool or creates a new instance if the pool is empty.
            Attempts to retrieve the item from the thread local pool first.
            If the thread local pool is empty, the item is taken from the shared pool
            along with more items that are moved to the thread local pool to avoid
            prevent acquiring the lock for shared pool too often.
            The methods should not be called after the pool is disposed, but it won't
            results in an error to do so (after depleting the items potentially left
            in the thread local pool, it will continue returning new objects created by the factory).
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.DefaultObjectPool`1.Return(`0)">
            <summary>
            Returns an item to the pool.
            Attempts to add the item to the thread local pool first.
            If the thread local pool is full, item is added to a shared pool,
            along with half of the items for the thread local pool, which
            should prevent acquiring the lock for shared pool too often.
            If called after the pool is disposed, we make best effort not to
            add anything to the thread local pool and we guarantee not to add
            anything to the shared pool (items will be disposed instead).
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.DefaultSslRootsOverride">
            <summary>
            Overrides the content of default SSL roots.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.DefaultSslRootsOverride.Override(Grpc.Core.Internal.NativeMethods)">
            <summary>
            Overrides C core's default roots with roots.pem loaded as embedded resource.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.GrpcThreadPool">
            <summary>
            Pool of threads polling on a set of completions queues.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.GrpcThreadPool.#ctor(Grpc.Core.GrpcEnvironment,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a thread pool threads polling on a set of completions queues.
            </summary>
            <param name="environment">Environment.</param>
            <param name="poolSize">Pool size.</param>
            <param name="completionQueueCount">Completion queue count.</param>
            <param name="inlineHandlers">Handler inlining.</param>
        </member>
        <member name="P:Grpc.Core.Internal.GrpcThreadPool.IsAlive">
            <summary>
            Returns true if there is at least one thread pool thread that hasn't
            already stopped.
            Threads can either stop because all completion queues shut down or
            because all foreground threads have already shutdown and process is
            going to exit.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.GrpcThreadPool.RunHandlerLoop(Grpc.Core.Internal.CompletionQueueSafeHandle,Grpc.Core.Profiling.IProfiler)">
            <summary>
            Body of the polling thread.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.INativeCall">
            <summary>
            Abstraction of a native call object.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.IObjectPool`1">
            <summary>
            Pool of objects.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.IPooledObject`1">
            <summary>
            An object that can be pooled in <c>IObjectPool</c>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Grpc.Core.Internal.IPooledObject`1.SetReturnToPoolAction(System.Action{`0})">
            <summary>
            Set the action that will be invoked to return a leased object to the pool.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.IServerResponseStream">
            <summary>
            Exposes non-generic members of <c>ServerReponseStream</c>.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.IServerResponseStream.WriteResponseHeadersAsync(Grpc.Core.Metadata)">
            <summary>
            Asynchronously sends response headers for the current call to the client. See <c>ServerCallContext.WriteResponseHeadersAsync</c> for exact semantics.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.IServerResponseStream.WriteOptions">
            <summary>
            Gets or sets the write options.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.MarshalUtils">
            <summary>
            Useful methods for native/managed marshalling.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.MarshalUtils.PtrToStringUTF8(System.IntPtr,System.Int32)">
            <summary>
            Converts <c>IntPtr</c> pointing to a UTF-8 encoded byte array to <c>string</c>.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.MarshalUtils.GetBytesUTF8(System.String)">
            <summary>
            Returns byte array containing UTF-8 encoding of given string.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.MarshalUtils.GetStringUTF8(System.Byte[])">
            <summary>
            Get string from a UTF8 encoded byte array.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.MarshalUtils.GetBytesASCII(System.String)">
            <summary>
            Returns byte array containing ASCII encoding of given string.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.MarshalUtils.GetStringASCII(System.Byte[])">
            <summary>
            Get string from an ASCII encoded byte array.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.MetadataArraySafeHandle">
            <summary>
            grpc_metadata_array from <c>grpc/grpc.h</c>
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.MetadataArraySafeHandle.ReadMetadataFromPtrUnsafe(System.IntPtr)">
            <summary>
            Reads metadata from pointer to grpc_metadata_array
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.NativeExtension">
            <summary>
            Takes care of loading C# native extension and provides access to PInvoke calls the library exports.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.NativeExtension.Get">
            <summary>
            Gets singleton instance of this class.
            The native extension is loaded when called for the first time.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.NativeExtension.NativeMethods">
            <summary>
            Provides access to the exported native methods.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.NativeExtension.LoadUnmanagedLibrary">
            <summary>
            Detects which configuration of native extension to load and load it.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.NativeExtension.LoadNativeMethods">
            <summary>
            Loads native extension and return native methods delegates.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.NativeExtension.LoadNativeMethodsUnity">
            <summary>
            Return native method delegates when running on Unity platform.
            Unity does not use standard NuGet packages and the native library is treated
            there as a "native plugin" which is (provided it has the right metadata)
            automatically made available to <c>[DllImport]</c> loading logic.
            WARNING: Unity support is experimental and work-in-progress. Don't expect it to work.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.NativeExtension.LoadNativeMethodsXamarin">
            <summary>
            Return native method delegates when running on the Xamarin platform.
            WARNING: Xamarin support is experimental and work-in-progress. Don't expect it to work.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.NativeLogRedirector">
            <summary>
            Logs from gRPC C core library can get lost if your application is not a console app.
            This class allows redirection of logs to gRPC logger.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.NativeLogRedirector.Redirect(Grpc.Core.Internal.NativeMethods)">
            <summary>
            Redirects logs from native gRPC C core library to a general logger.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.MonoPInvokeCallbackAttribute">
            <summary>
            Use this attribute to mark methods that will be called back from P/Invoke calls.
            iOS (and probably other AOT platforms) needs to have delegates registered.
            Instead of depending on Xamarin.iOS for this, we can just create our own,
            the iOS runtime just checks for the type name.
            See: https://docs.microsoft.com/en-gb/xamarin/ios/internals/limitations#reverse-callbacks
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.NativeMethods">
            <summary>
            Provides access to all native methods provided by <c>NativeExtension</c>.
            An extra level of indirection is added to P/Invoke calls to allow intelligent loading
            of the right configuration of the native extension based on current platform, architecture etc.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.NativeMethods.Get">
            <summary>
            Gets singleton instance of this class.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.NativeMethods.Delegates">
            <summary>
            Delegate types for all published native methods. Declared under inner class to prevent scope pollution.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.NativeMethods.DllImportsFromStaticLib">
            <summary>
            grpc_csharp_ext used as a static library (e.g Unity iOS).
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.NativeMethods.DllImportsFromSharedLib">
            <summary>
            grpc_csharp_ext used a shared library (e.g on Unity Standalone and Android).
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.PlatformApis">
            <summary>
            Utility methods for detecting platform and architecture.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.PlatformApis.IsUnity">
            <summary>
            true if running on Unity platform.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.PlatformApis.IsUnityIOS">
            <summary>
            true if running on Unity iOS, false otherwise.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.PlatformApis.IsXamarin">
            <summary>
            true if running on a Xamarin platform (either Xamarin.Android or Xamarin.iOS),
            false otherwise.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.PlatformApis.IsXamarinIOS">
            <summary>
            true if running on Xamarin.iOS, false otherwise.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.PlatformApis.IsXamarinAndroid">
            <summary>
            true if running on Xamarin.Android, false otherwise.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.PlatformApis.IsNetCore">
            <summary>
            true if running on .NET Core (CoreCLR), false otherwise.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.PlatformApis.GetUnityRuntimePlatform">
            <summary>
            Returns <c>UnityEngine.Application.platform</c> as a string.
            See https://docs.unity3d.com/ScriptReference/Application-platform.html for possible values.
            Value is obtained via reflection to avoid compile-time dependency on Unity.
            This method should only be called if <c>IsUnity</c> is <c>true</c>.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.RequestCallContextSafeHandle">
            <summary>
            grpcsharp_request_call_context
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.SafeHandleZeroIsInvalid">
            <summary>
            Safe handle to wrap native objects.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.UnimplementedMethodCallHandler.UnimplementedMethod(Grpc.Core.IAsyncStreamReader{System.Byte[]},Grpc.Core.IServerStreamWriter{System.Byte[]},Grpc.Core.ServerCallContext)">
            <summary>
            Handler used for unimplemented method.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ServerCredentialsSafeHandle">
            <summary>
            grpc_server_credentials from <c>grpc/grpc_security.h</c>
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ServerResponseStream`2">
            <summary>
            Writes responses asynchronously to an underlying AsyncCallServer object.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ServerRpcNew">
            <summary>
            Details of a newly received RPC.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.ServerSafeHandle">
            <summary>
            grpc_server from grpc/grpc.h
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.Timespec">
            <summary>
            gpr_timespec from grpc/support/time.h
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.InfFuture">
            <summary>
            Timespec a long time in the future.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.InfPast">
            <summary>
            Timespec a long time in the past.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.Now">
            <summary>
            Return Timespec representing the current time.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.TimevalSeconds">
            <summary>
            Seconds since unix epoch.
            </summary>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.TimevalNanos">
            <summary>
            The nanoseconds part of timeval.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.Timespec.ToClockType(Grpc.Core.Internal.ClockType)">
            <summary>
            Converts the timespec to desired clock type.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.Timespec.ToDateTime">
            <summary>
            Converts Timespec to DateTime.
            Timespec needs to be of type GPRClockType.Realtime and needs to represent a legal value.
            DateTime has lower resolution (100ns), so rounding can occurs.
            Value are always rounded up to the nearest DateTime value in the future.
            
            For Timespec.InfFuture or if timespec is after the largest representable DateTime, DateTime.MaxValue is returned.
            For Timespec.InfPast or if timespec is before the lowest representable DateTime, DateTime.MinValue is returned.
            
            Unless DateTime.MaxValue or DateTime.MinValue is returned, the resulting DateTime is always in UTC
            (DateTimeKind.Utc)
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.Timespec.FromDateTime(System.DateTime)">
            <summary>
            Creates DateTime to Timespec.
            DateTime has to be in UTC (DateTimeKind.Utc) unless it's DateTime.MaxValue or DateTime.MinValue.
            For DateTime.MaxValue of date time after the largest representable Timespec, Timespec.InfFuture is returned.
            For DateTime.MinValue of date time before the lowest representable Timespec, Timespec.InfPast is returned.
            </summary>
            <returns>The date time.</returns>
            <param name="dateTime">Date time.</param>
        </member>
        <member name="P:Grpc.Core.Internal.Timespec.PreciseNow">
            <summary>
            Gets current timestamp using <c>GPRClockType.Precise</c>.
            Only available internally because core needs to be compiled with 
            GRPC_TIMERS_RDTSC support for this to use RDTSC.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.UnimplementedCallInvoker">
            <summary>
            Call invoker that throws <c>NotImplementedException</c> for all requests.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.UnmanagedLibrary">
            <summary>
            Represents a dynamically loaded unmanaged library in a (partially) platform independent manner.
            First, the native library is loaded using dlopen (on Unix systems) or using LoadLibrary (on Windows).
            dlsym or GetProcAddress are then used to obtain symbol addresses. <c>Marshal.GetDelegateForFunctionPointer</c>
            transforms the addresses into delegates to native methods.
            See http://stackoverflow.com/questions/13461989/p-invoke-to-dynamically-loaded-library-on-mono.
            </summary>
        </member>
        <member name="M:Grpc.Core.Internal.UnmanagedLibrary.LoadSymbol(System.String)">
            <summary>
            Loads symbol in a platform specific way.
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:Grpc.Core.Internal.UnmanagedLibrary.PlatformSpecificLoadLibrary(System.String,System.String@)">
            <summary>
            Loads library in a platform specific way.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.UnmanagedLibrary.Mono">
            <summary>
            On Linux systems, using using dlopen and dlsym results in
            DllNotFoundException("libdl.so not found") if libc6-dev
            is not installed. As a workaround, we load symbols for
            dlopen and dlsym from the current process as on Linux
            Mono sure is linked against these symbols.
            </summary>
        </member>
        <member name="T:Grpc.Core.Internal.UnmanagedLibrary.CoreCLR">
            <summary>
            Similarly as for Mono on Linux, we load symbols for
            dlopen and dlsym from the "libcoreclr.so",
            to avoid the dependency on libc-dev Linux.
            </summary>
        </member>
        <member name="T:Grpc.Core.DefaultServerCallContext">
            <summary>
            Default implementation of <c>ServerCallContext</c>.
            </summary>
        </member>
        <member name="M:Grpc.Core.DefaultServerCallContext.#ctor(Grpc.Core.Internal.CallSafeHandle,System.String,System.String,System.DateTime,Grpc.Core.Metadata,System.Threading.CancellationToken,Grpc.Core.Internal.IServerResponseStream)">
            <summary>
            Creates a new instance of <c>ServerCallContext</c>.
            To allow reuse of ServerCallContext API by different gRPC implementations, the implementation of some members is provided externally.
            To provide state, this <c>ServerCallContext</c> instance and <c>extraData</c> will be passed to the member implementations.
            </summary>
        </member>
        <member name="T:Grpc.Core.IServerStreamWriter`1">
            <summary>
            A writable stream of messages that is used in server-side handlers.
            </summary>
        </member>
        <member name="T:Grpc.Core.KeyCertificatePair">
            <summary>
            Key certificate pair (in PEM encoding).
            </summary>
        </member>
        <member name="M:Grpc.Core.KeyCertificatePair.#ctor(System.String,System.String)">
            <summary>
            Creates a new certificate chain - private key pair.
            </summary>
            <param name="certificateChain">PEM encoded certificate chain.</param>
            <param name="privateKey">PEM encoded private key.</param>
        </member>
        <member name="P:Grpc.Core.KeyCertificatePair.CertificateChain">
            <summary>
            PEM encoded certificate chain.
            </summary>
        </member>
        <member name="P:Grpc.Core.KeyCertificatePair.PrivateKey">
            <summary>
            PEM encoded private key.
            </summary>
        </member>
        <member name="T:Grpc.Core.Logging.ConsoleLogger">
            <summary>Logger that logs to System.Console.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.#ctor">
            <summary>Creates a console logger not associated to any specific type.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.#ctor(System.Type)">
            <summary>Creates a console logger that logs messsage specific for given type.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ConsoleLogger.ForType``1">
            <summary>
            Returns a logger associated with the specified type.
            </summary>
        </member>
        <member name="T:Grpc.Core.Logging.ILogger">
            <summary>For logging messages.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.ForType``1">
            <summary>Returns a logger associated with the specified type.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Debug(System.String)">
            <summary>Logs a message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Info(System.String)">
            <summary>Logs a message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Info(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Warning(System.String)">
            <summary>Logs a message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Warning(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Warning(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Error(System.String)">
            <summary>Logs a message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Error(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.ILogger.Error(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Error.</summary>
        </member>
        <member name="T:Grpc.Core.Logging.LogLevel">
            <summary>Standard logging levels.</summary>
        </member>
        <member name="F:Grpc.Core.Logging.LogLevel.Debug">
            <summary>
            Debug severity.
            </summary>
        </member>
        <member name="F:Grpc.Core.Logging.LogLevel.Info">
            <summary>
            Info severity.
            </summary>
        </member>
        <member name="F:Grpc.Core.Logging.LogLevel.Warning">
            <summary>
            Warning severity.
            </summary>
        </member>
        <member name="F:Grpc.Core.Logging.LogLevel.Error">
            <summary>
            Error severity.
            </summary>
        </member>
        <member name="F:Grpc.Core.Logging.LogLevel.Off">
            <summary>
            Logging is off.
            </summary>
        </member>
        <member name="T:Grpc.Core.Logging.LogLevelFilterLogger">
            <summary>Logger that filters out messages below certain log level.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.#ctor(Grpc.Core.Logging.ILogger,Grpc.Core.Logging.LogLevel)">
            <summary>
            Creates and instance of <c>LogLevelFilter.</c>
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.#ctor(Grpc.Core.Logging.ILogger,Grpc.Core.Logging.LogLevel,System.Boolean)">
            <summary>
            Creates and instance of <c>LogLevelFilter.</c>
            The <c>fromEnvironmentVariable</c> parameter allows looking up "GRPC_VERBOSITY" setting provided by C-core
            and uses the same log level for C# logs. Using this setting is recommended as it can prevent unintentionally hiding
            C core logs requested by "GRPC_VERBOSITY" environment variable (which could happen if C# logger's log level was set to a more restrictive value).
            </summary>
            <param name="logger">the logger to forward filtered logs to.</param>
            <param name="defaultLogLevel">the default log level, unless overriden by env variable.</param>
            <param name="fromEnvironmentVariable">if <c>true</c>, override log level with setting from environment variable.</param>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.ForType``1">
            <summary>
            Returns a logger associated with the specified type.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Debug(System.String)">
            <summary>Logs a message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Debug(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Info(System.String)">
            <summary>Logs a message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Info(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Warning(System.String)">
            <summary>Logs a message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Warning(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Warning(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Error(System.String)">
            <summary>Logs a message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Error(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.Error(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.LogLevelFilterLogger.GetLogLevelFromEnvironment(Grpc.Core.Logging.LogLevel,System.Boolean)">
            <summary>Get log level based on a default and lookup of <c>GRPC_VERBOSITY</c> environment variable.</summary>
        </member>
        <member name="T:Grpc.Core.Logging.NullLogger">
            <summary>
            Logger which doesn't log any information anywhere.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Debug(System.String)">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Debug(System.String,System.Object[])">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Error(System.String)">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Error(System.Exception,System.String)">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Error(System.String,System.Object[])">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.ForType``1">
            <summary>
            Returns a reference to the instance on which the method is called, as
            instances aren't associated with specific types.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Info(System.String)">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Info(System.String,System.Object[])">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Warning(System.String)">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Warning(System.Exception,System.String)">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.NullLogger.Warning(System.String,System.Object[])">
            <summary>
            As with all logging calls on this logger, this method is a no-op.
            </summary>
        </member>
        <member name="T:Grpc.Core.Logging.TextWriterLogger">
            <summary>Logger that logs to an arbitrary <c>System.IO.TextWriter</c>.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a console logger not associated to any specific type and writes to given <c>System.IO.TextWriter</c>.
            User is responsible for providing an instance of TextWriter that is thread-safe.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.#ctor(System.Func{System.IO.TextWriter})">
            <summary>
            Creates a console logger not associated to any specific type and writes to a <c>System.IO.TextWriter</c> obtained from given provider.
            User is responsible for providing an instance of TextWriter that is thread-safe.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.#ctor(System.Func{System.IO.TextWriter},System.Type)">
            <summary>Creates a console logger that logs messsage specific for given type.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.ForType``1">
            <summary>
            Returns a logger associated with the specified type.
            </summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Debug(System.String)">
            <summary>Logs a message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Debug(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Debug.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Info(System.String)">
            <summary>Logs a message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Info(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Info.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Warning(System.String)">
            <summary>Logs a message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Warning(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Warning(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Warning.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Error(System.String)">
            <summary>Logs a message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Error(System.String,System.Object[])">
            <summary>Logs a formatted message with severity Error.</summary>
        </member>
        <member name="M:Grpc.Core.Logging.TextWriterLogger.Error(System.Exception,System.String)">
            <summary>Logs a message and an associated exception with severity Error.</summary>
        </member>
        <member name="P:Grpc.Core.Logging.TextWriterLogger.AssociatedType">
            <summary>Gets the type associated with this logger.</summary>
        </member>
        <member name="T:Grpc.Core.Marshaller`1">
            <summary>
            Encapsulates the logic for serializing and deserializing messages.
            </summary>
        </member>
        <member name="M:Grpc.Core.Marshaller`1.#ctor(System.Func{`0,System.Byte[]},System.Func{System.Byte[],`0})">
            <summary>
            Initializes a new marshaller from simple serialize/deserialize functions.
            </summary>
            <param name="serializer">Function that will be used to serialize messages.</param>
            <param name="deserializer">Function that will be used to deserialize messages.</param>
        </member>
        <member name="M:Grpc.Core.Marshaller`1.#ctor(System.Action{`0,Grpc.Core.SerializationContext},System.Func{Grpc.Core.DeserializationContext,`0})">
            <summary>
            Initializes a new marshaller from serialize/deserialize fuctions that can access serialization and deserialization
            context. Compared to the simple serializer/deserializer functions, using the contextual version provides more
            flexibility and can lead to increased efficiency (and better performance).
            Note: This constructor is part of an experimental API that can change or be removed without any prior notice.
            </summary>
            <param name="serializer">Function that will be used to serialize messages.</param>
            <param name="deserializer">Function that will be used to deserialize messages.</param>
        </member>
        <member name="P:Grpc.Core.Marshaller`1.Serializer">
            <summary>
            Gets the serializer function.
            </summary>
        </member>
        <member name="P:Grpc.Core.Marshaller`1.Deserializer">
            <summary>
            Gets the deserializer function.
            </summary>
        </member>
        <member name="P:Grpc.Core.Marshaller`1.ContextualSerializer">
            <summary>
            Gets the serializer function.
            Note: experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="P:Grpc.Core.Marshaller`1.ContextualDeserializer">
            <summary>
            Gets the serializer function.
            Note: experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="T:Grpc.Core.Marshallers">
            <summary>
            Utilities for creating marshallers.
            </summary>
        </member>
        <member name="M:Grpc.Core.Marshallers.Create``1(System.Func{``0,System.Byte[]},System.Func{System.Byte[],``0})">
            <summary>
            Creates a marshaller from specified serializer and deserializer.
            </summary>
        </member>
        <member name="M:Grpc.Core.Marshallers.Create``1(System.Action{``0,Grpc.Core.SerializationContext},System.Func{Grpc.Core.DeserializationContext,``0})">
            <summary>
            Creates a marshaller from specified contextual serializer and deserializer.
            Note: This method is part of an experimental API that can change or be removed without any prior notice.
            </summary>
        </member>
        <member name="P:Grpc.Core.Marshallers.StringMarshaller">
            <summary>
            Returns a marshaller for <c>string</c> type. This is useful for testing.
            </summary>
        </member>
        <member name="T:Grpc.Core.Metadata">
            <summary>
            A collection of metadata entries that can be exchanged during a call.
            gRPC supports these types of metadata:
            <list type="bullet">
            <item><term>Request headers</term><description>are sent by the client at the beginning of a remote call before any request messages are sent.</description></item>
            <item><term>Response headers</term><description>are sent by the server at the beginning of a remote call handler before any response messages are sent.</description></item>
            <item><term>Response trailers</term><description>are sent by the server at the end of a remote call along with resulting call status.</description></item>
            </list>
            </summary>
        </member>
        <member name="F:Grpc.Core.Metadata.BinaryHeaderSuffix">
            <summary>
            All binary headers should have this suffix.
            </summary>
        </member>
        <member name="F:Grpc.Core.Metadata.Empty">
            <summary>
            An read-only instance of metadata containing no entries.
            </summary>
        </member>
        <member name="F:Grpc.Core.Metadata.CompressionRequestAlgorithmMetadataKey">
            <summary>
            To be used in initial metadata to request specific compression algorithm
            for given call. Direct selection of compression algorithms is an internal
            feature and is not part of public API.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.#ctor">
            <summary>
            Initializes a new instance of <c>Metadata</c>.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Freeze">
            <summary>
            Makes this object read-only.
            </summary>
            <returns>this object</returns>
        </member>
        <member name="M:Grpc.Core.Metadata.IndexOf(Grpc.Core.Metadata.Entry)">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Insert(System.Int32,Grpc.Core.Metadata.Entry)">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.RemoveAt(System.Int32)">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.Item(System.Int32)">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Add(Grpc.Core.Metadata.Entry)">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Add(System.String,System.String)">
            <summary>
            Adds a new ASCII-valued metadata entry. See <c>Metadata.Entry</c> constructor for params.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Add(System.String,System.Byte[])">
            <summary>
            Adds a new binary-valued metadata entry. See <c>Metadata.Entry</c> constructor for params.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Clear">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Contains(Grpc.Core.Metadata.Entry)">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.CopyTo(Grpc.Core.Metadata.Entry[],System.Int32)">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.Count">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.IsReadOnly">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Remove(Grpc.Core.Metadata.Entry)">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.GetEnumerator">
            <summary>
            <see cref="T:IList`1"/>
            </summary>
        </member>
        <member name="T:Grpc.Core.Metadata.Entry">
            <summary>
            Metadata entry
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.Metadata.Entry"/> struct with a binary value.
            </summary>
            <param name="key">Metadata key. Gets converted to lowercase. Needs to have suffix indicating a binary valued metadata entry. Can only contain lowercase alphanumeric characters, underscores, hyphens and dots.</param>
            <param name="valueBytes">Value bytes.</param>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Grpc.Core.Metadata.Entry"/> struct with an ASCII value.
            </summary>
            <param name="key">Metadata key. Gets converted to lowercase. Must not use suffix indicating a binary valued metadata entry. Can only contain lowercase alphanumeric characters, underscores, hyphens and dots.</param>
            <param name="value">Value string. Only ASCII characters are allowed.</param>
        </member>
        <member name="P:Grpc.Core.Metadata.Entry.Key">
            <summary>
            Gets the metadata entry key.
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.Entry.ValueBytes">
            <summary>
            Gets the binary value of this metadata entry.
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.Entry.Value">
            <summary>
            Gets the string value of this metadata entry.
            </summary>
        </member>
        <member name="P:Grpc.Core.Metadata.Entry.IsBinary">
            <summary>
            Returns <c>true</c> if this entry is a binary-value entry.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Grpc.Core.Metadata.Entry"/>.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.GetSerializedValueUnsafe">
            <summary>
            Gets the serialized value for this entry. For binary metadata entries, this leaks
            the internal <c>valueBytes</c> byte array and caller must not change contents of it.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.CreateUnsafe(System.String,System.Byte[])">
            <summary>
            Creates a binary value or ascii value metadata entry from data received from the native layer.
            We trust C core to give us well-formed data, so we don't perform any checks or defensive copying.
            </summary>
        </member>
        <member name="M:Grpc.Core.Metadata.Entry.HasBinaryHeaderSuffix(System.String)">
            <summary>
            Returns <c>true</c> if the key has "-bin" binary header suffix.
            </summary>
        </member>
        <member name="T:Grpc.Core.MethodType">
            <summary>
            Method types supported by gRPC.
            </summary>
        </member>
        <member name="F:Grpc.Core.MethodType.Unary">
            <summary>Single request sent from client, single response received from server.</summary>
        </member>
        <member name="F:Grpc.Core.MethodType.ClientStreaming">
            <summary>Stream of request sent from client, single response received from server.</summary>
        </member>
        <member name="F:Grpc.Core.MethodType.ServerStreaming">
            <summary>Single request sent from client, stream of responses received from server.</summary>
        </member>
        <member name="F:Grpc.Core.MethodType.DuplexStreaming">
            <summary>Both server and client can stream arbitrary number of requests and responses simultaneously.</summary>
        </member>
        <member name="T:Grpc.Core.IMethod">
            <summary>
            A non-generic representation of a remote method.
            </summary>
        </member>
        <member name="P:Grpc.Core.IMethod.Type">
            <summary>
            Gets the type of the method.
            </summary>
        </member>
        <member name="P:Grpc.Core.IMethod.ServiceName">
            <summary>
            Gets the name of the service to which this method belongs.
            </summary>
        </member>
        <member name="P:Grpc.Core.IMethod.Name">
            <summary>
            Gets the unqualified name of the method.
            </summary>
        </member>
        <member name="P:Grpc.Core.IMethod.FullName">
            <summary>
            Gets the fully qualified name of the method. On the server side, methods are dispatched
            based on this name.
            </summary>
        </member>
        <member name="T:Grpc.Core.Method`2">
            <summary>
            A description of a remote method.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="M:Grpc.Core.Method`2.#ctor(Grpc.Core.MethodType,System.String,System.String,Grpc.Core.Marshaller{`0},Grpc.Core.Marshaller{`1})">
            <summary>
            Initializes a new instance of the <c>Method</c> class.
            </summary>
            <param name="type">Type of method.</param>
            <param name="serviceName">Name of service this method belongs to.</param>
            <param name="name">Unqualified name of the method.</param>
            <param name="requestMarshaller">Marshaller used for request messages.</param>
            <param name="responseMarshaller">Marshaller used for response messages.</param>
        </member>
        <member name="P:Grpc.Core.Method`2.Type">
            <summary>
            Gets the type of the method.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.ServiceName">
            <summary>
            Gets the name of the service to which this method belongs.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.Name">
            <summary>
            Gets the unqualified name of the method.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.RequestMarshaller">
            <summary>
            Gets the marshaller used for request messages.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.ResponseMarshaller">
            <summary>
            Gets the marshaller used for response messages.
            </summary>
        </member>
        <member name="P:Grpc.Core.Method`2.FullName">
            <summary>
            Gets the fully qualified name of the method. On the server side, methods are dispatched
            based on this name.
            </summary>
        </member>
        <member name="M:Grpc.Core.Method`2.GetFullName(System.String,System.String)">
            <summary>
            Gets full name of the method including the service name.
            </summary>
        </member>
        <member name="T:Grpc.Core.RpcException">
            <summary>
            Thrown when remote procedure call fails. Every <c>RpcException</c> is associated with a resulting <see cref="P:Grpc.Core.RpcException.Status"/> of the call.
            </summary>
        </member>
        <member name="M:Grpc.Core.RpcException.#ctor(Grpc.Core.Status)">
            <summary>
            Creates a new <c>RpcException</c> associated with given status.
            </summary>
            <param name="status">Resulting status of a call.</param>
        </member>
        <member name="M:Grpc.Core.RpcException.#ctor(Grpc.Core.Status,System.String)">
            <summary>
            Creates a new <c>RpcException</c> associated with given status and message.
            </summary>
            <param name="status">Resulting status of a call.</param>
            <param name="message">The exception message.</param> 
        </member>
        <member name="M:Grpc.Core.RpcException.#ctor(Grpc.Core.Status,Grpc.Core.Metadata)">
            <summary>
            Creates a new <c>RpcException</c> associated with given status and trailing response metadata.
            </summary>
            <param name="status">Resulting status of a call.</param>
            <param name="trailers">Response trailing metadata.</param> 
        </member>
        <member name="M:Grpc.Core.RpcException.#ctor(Grpc.Core.Status,Grpc.Core.Metadata,System.String)">
            <summary>
            Creates a new <c>RpcException</c> associated with given status, message and trailing response metadata.
            </summary>
            <param name="status">Resulting status of a call.</param>
            <param name="trailers">Response trailing metadata.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="P:Grpc.Core.RpcException.Status">
            <summary>
            Resulting status of the call.
            </summary>
        </member>
        <member name="P:Grpc.Core.RpcException.StatusCode">
            <summary>
            Returns the status code of the call, as a convenient alternative to <see cref="P:Grpc.Core.RpcException.StatusCode">Status.StatusCode</see>.
            </summary>
        </member>
        <member name="P:Grpc.Core.RpcException.Trailers">
            <summary>
            Gets the call trailing metadata.
            Trailers only have meaningful content for client-side calls (in which case they represent the trailing metadata sent by the server when closing the call).
            Instances of <c>RpcException</c> thrown by the server-side part of the stack will have trailers always set to empty.
            </summary>
        </member>
        <member name="T:Grpc.Core.SerializationContext">
            <summary>
            Provides storage for payload when serializing a message.
            </summary>
        </member>
        <member name="M:Grpc.Core.SerializationContext.Complete(System.Byte[])">
            <summary>
            Use the byte array as serialized form of current message and mark serialization process as complete.
            Complete() can only be called once. By calling this method the caller gives up the ownership of the
            payload which must not be accessed afterwards.
            </summary>
            <param name="payload">the serialized form of current message</param>
        </member>
        <member name="T:Grpc.Core.Server">
            <summary>
            gRPC server. A single server can serve an arbitrary number of services and can listen on more than one port.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.#ctor">
            <summary>
            Creates a new server.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.ChannelOption})">
            <summary>
            Creates a new server.
            </summary>
            <param name="options">Channel options.</param>
        </member>
        <member name="P:Grpc.Core.Server.Services">
            <summary>
            Services that will be exported by the server once started. Register a service with this
            server by adding its definition to this collection.
            </summary>
        </member>
        <member name="P:Grpc.Core.Server.Ports">
            <summary>
            Ports on which the server will listen once started. Register a port with this
            server by adding its definition to this collection.
            </summary>
        </member>
        <member name="P:Grpc.Core.Server.ShutdownTask">
            <summary>
            To allow awaiting termination of the server.
            </summary>
        </member>
        <member name="P:Grpc.Core.Server.RequestCallTokensPerCompletionQueue">
            <summary>
            Experimental API. Might anytime change without prior notice.
            Number or calls requested via grpc_server_request_call at any given time for each completion queue.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.Start">
            <summary>
            Starts the server.
            Throws <c>IOException</c> if not successful.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ShutdownAsync">
            <summary>
            Requests server shutdown and when there are no more calls being serviced,
            cleans up used resources. The returned task finishes when shutdown procedure
            is complete.
            </summary>
            <remarks>
            It is strongly recommended to shutdown all previously created servers before exiting from the process.
            </remarks>
        </member>
        <member name="M:Grpc.Core.Server.KillAsync">
            <summary>
            Requests server shutdown while cancelling all the in-progress calls.
            The returned task finishes when shutdown procedure is complete.
            </summary>
            <remarks>
            It is strongly recommended to shutdown all previously created servers before exiting from the process.
            </remarks>
        </member>
        <member name="M:Grpc.Core.Server.ShutdownInternalAsync(System.Boolean)">
            <summary>
            Shuts down the server.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ShutdownCompleteOrEnvironmentDeadAsync">
            <summary>
            In case the environment's threadpool becomes dead, the shutdown completion will
            never be delivered, but we need to release the environment's handle anyway.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.AddServiceDefinitionInternal(Grpc.Core.ServerServiceDefinition)">
            <summary>
            Adds a service definition.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.AddPortInternal(Grpc.Core.ServerPort)">
            <summary>
            Adds a listening port.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.AllowOneRpc(Grpc.Core.Internal.CompletionQueueSafeHandle)">
            <summary>
            Allows one new RPC call to be received by server.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.CheckPortsBoundSuccessfully">
            <summary>
            Checks that all ports have been bound successfully.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.HandleCallAsync(Grpc.Core.Internal.ServerRpcNew,Grpc.Core.Internal.CompletionQueueSafeHandle,System.Action)">
            <summary>
            Selects corresponding handler for given call and handles the call.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.HandleNewServerRpc(System.Boolean,Grpc.Core.Internal.RequestCallContextSafeHandle,Grpc.Core.Internal.CompletionQueueSafeHandle)">
            <summary>
            Handles the native callback.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.HandleServerShutdown(System.Boolean,Grpc.Core.Internal.BatchContextSafeHandle,System.Object)">
            <summary>
            Handles native callback.
            </summary>
        </member>
        <member name="T:Grpc.Core.Server.ServiceDefinitionCollection">
            <summary>
            Collection of service definitions.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ServiceDefinitionCollection.Add(Grpc.Core.ServerServiceDefinition)">
            <summary>
            Adds a service definition to the server. This is how you register
            handlers for a service with the server. Only call this before Start().
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ServiceDefinitionCollection.GetEnumerator">
            <summary>
            Gets enumerator for this collection.
            </summary>
        </member>
        <member name="T:Grpc.Core.Server.ServerPortCollection">
            <summary>
            Collection of server ports.
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ServerPortCollection.Add(Grpc.Core.ServerPort)">
            <summary>
            Adds a new port on which server should listen.
            Only call this before Start().
            <returns>The port on which server will be listening.</returns>
            </summary>
        </member>
        <member name="M:Grpc.Core.Server.ServerPortCollection.Add(System.String,System.Int32,Grpc.Core.ServerCredentials)">
            <summary>
            Adds a new port on which server should listen.
            <returns>The port on which server will be listening.</returns>
            </summary>
            <param name="host">the host</param>
            <param name="port">the port. If zero, an unused port is chosen automatically.</param>
            <param name="credentials">credentials to use to secure this port.</param>
        </member>
        <member name="M:Grpc.Core.Server.ServerPortCollection.GetEnumerator">
            <summary>
            Gets enumerator for this collection.
            </summary>
        </member>
        <member name="T:Grpc.Core.ServerCallContext">
            <summary>
            Context for a server-side call.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerCallContext.#ctor">
            <summary>
            Creates a new instance of <c>ServerCallContext</c>.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerCallContext.WriteResponseHeadersAsync(Grpc.Core.Metadata)">
            <summary>
            Asynchronously sends response headers for the current call to the client. This method may only be invoked once for each call and needs to be invoked
            before any response messages are written. Writing the first response message implicitly sends empty response headers if <c>WriteResponseHeadersAsync</c> haven't
            been called yet.
            </summary>
            <param name="responseHeaders">The response headers to send.</param>
            <returns>The task that finished once response headers have been written.</returns>
        </member>
        <member name="M:Grpc.Core.ServerCallContext.CreatePropagationToken(Grpc.Core.ContextPropagationOptions)">
            <summary>
            Creates a propagation token to be used to propagate call context to a child call.
            </summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Method">
            <summary>Name of method called in this RPC.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Host">
            <summary>Name of host called in this RPC.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Peer">
            <summary>Address of the remote endpoint in URI format.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Deadline">
            <summary>Deadline for this RPC.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.RequestHeaders">
            <summary>Initial metadata sent by client.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.CancellationToken">
            <summary>Cancellation token signals when call is cancelled.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.ResponseTrailers">
            <summary>Trailers to send back to client after RPC finishes.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.Status">
            <summary> Status to send back to client after RPC finishes.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.WriteOptions">
            <summary>
            Allows setting write options for the following write.
            For streaming response calls, this property is also exposed as on IServerStreamWriter for convenience.
            Both properties are backed by the same underlying value.
            </summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.AuthContext">
            <summary>
            Gets the <c>AuthContext</c> associated with this call.
            Note: Access to AuthContext is an experimental API that can change without any prior notice.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerCallContext.WriteResponseHeadersAsyncCore(Grpc.Core.Metadata)">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="M:Grpc.Core.ServerCallContext.CreatePropagationTokenCore(Grpc.Core.ContextPropagationOptions)">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.MethodCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.HostCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.PeerCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.DeadlineCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.RequestHeadersCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.CancellationTokenCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.ResponseTrailersCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.StatusCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.WriteOptionsCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="P:Grpc.Core.ServerCallContext.AuthContextCore">
            <summary>Provides implementation of a non-virtual public member.</summary>
        </member>
        <member name="T:Grpc.Core.ServerCredentials">
            <summary>
            Server side credentials.
            </summary>
        </member>
        <member name="P:Grpc.Core.ServerCredentials.Insecure">
            <summary>
            Returns instance of credential that provides no security and 
            will result in creating an unsecure server port with no encryption whatsoever.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerCredentials.ToNativeCredentials">
            <summary>
            Creates native object for the credentials.
            </summary>
            <returns>The native credentials.</returns>
        </member>
        <member name="T:Grpc.Core.SslClientCertificateRequestType">
            <summary>
            Modes of requesting client's SSL certificate by the server.
            Corresponds to <c>grpc_ssl_client_certificate_request_type</c>.
            </summary>
        </member>
        <member name="F:Grpc.Core.SslClientCertificateRequestType.DontRequest">
            <summary>
            Server does not request client certificate.
            The certificate presented by the client is not checked by the server at
            all. (A client may present a self signed or signed certificate or not
            present a certificate at all and any of those option would be accepted)
            </summary>
        </member>
        <member name="F:Grpc.Core.SslClientCertificateRequestType.RequestButDontVerify">
             <summary>
             Server requests client certificate but does not enforce that the client
             presents a certificate.
             If the client presents a certificate, the client authentication is left to
             the application (the necessary metadata will be available to the
             application via authentication context properties, see grpc_auth_context).
             The client's key certificate pair must be valid for the SSL connection to
             be established.
            </summary>
        </member>
        <member name="F:Grpc.Core.SslClientCertificateRequestType.RequestAndVerify">
            <summary>
            Server requests client certificate but does not enforce that the client
            presents a certificate.
            If the client presents a certificate, the client authentication is done by
            the gRPC framework. (For a successful connection the client needs to either
            present a certificate that can be verified against the root certificate
            configured by the server or not present a certificate at all)
            The client's key certificate pair must be valid for the SSL connection to
            be established.
            </summary>
        </member>
        <member name="F:Grpc.Core.SslClientCertificateRequestType.RequestAndRequireButDontVerify">
             <summary>
             Server requests client certificate and enforces that the client presents a
             certificate.
             If the client presents a certificate, the client authentication is left to
             the application (the necessary metadata will be available to the
             application via authentication context properties, see grpc_auth_context).
             The client's key certificate pair must be valid for the SSL connection to
             be established.
            </summary>
        </member>
        <member name="F:Grpc.Core.SslClientCertificateRequestType.RequestAndRequireAndVerify">
            <summary>
            Server requests client certificate and enforces that the client presents a
            certificate.
            The cerificate presented by the client is verified by the gRPC framework.
            (For a successful connection the client needs to present a certificate that
            can be verified against the root certificate configured by the server)
            The client's key certificate pair must be valid for the SSL connection to
            be established.
            </summary>
        </member>
        <member name="T:Grpc.Core.SslServerCredentials">
            <summary>
            Server-side SSL credentials.
            </summary>
        </member>
        <member name="M:Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair},System.String,System.Boolean)">
            <summary>
            Creates server-side SSL credentials.
            </summary>
            <param name="keyCertificatePairs">Key-certificates to use.</param>
            <param name="rootCertificates">PEM encoded client root certificates used to authenticate client.</param>
            <param name="forceClientAuth">Deprecated, use clientCertificateRequest overload instead.</param>
        </member>
        <member name="M:Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair},System.String,Grpc.Core.SslClientCertificateRequestType)">
            <summary>
            Creates server-side SSL credentials.
            </summary>
            <param name="keyCertificatePairs">Key-certificates to use.</param>
            <param name="rootCertificates">PEM encoded client root certificates used to authenticate client.</param>
            <param name="clientCertificateRequest">Options for requesting and verifying client certificate.</param>
        </member>
        <member name="M:Grpc.Core.SslServerCredentials.#ctor(System.Collections.Generic.IEnumerable{Grpc.Core.KeyCertificatePair})">
            <summary>
            Creates server-side SSL credentials.
            This constructor should be used if you do not wish to authenticate the client.
            (client certificate won't be requested and checked by the server at all).
            </summary>
            <param name="keyCertificatePairs">Key-certificates to use.</param>
        </member>
        <member name="P:Grpc.Core.SslServerCredentials.KeyCertificatePairs">
            <summary>
            Key-certificate pairs.
            </summary>
        </member>
        <member name="P:Grpc.Core.SslServerCredentials.RootCertificates">
            <summary>
            PEM encoded client root certificates.
            </summary>
        </member>
        <member name="P:Grpc.Core.SslServerCredentials.ForceClientAuthentication">
            <summary>
            Deprecated. If true, the authenticity of client check will be enforced.
            </summary>
        </member>
        <member name="P:Grpc.Core.SslServerCredentials.ClientCertificateRequest">
            <summary>
            Mode of requesting certificate from client by the server.
            </summary>
        </member>
        <member name="T:Grpc.Core.UnaryServerMethod`2">
            <summary>
            Server-side handler for unary call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="T:Grpc.Core.ClientStreamingServerMethod`2">
            <summary>
            Server-side handler for client streaming call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="T:Grpc.Core.ServerStreamingServerMethod`2">
            <summary>
            Server-side handler for server streaming call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="T:Grpc.Core.DuplexStreamingServerMethod`2">
            <summary>
            Server-side handler for bidi streaming call.
            </summary>
            <typeparam name="TRequest">Request message type for this method.</typeparam>
            <typeparam name="TResponse">Response message type for this method.</typeparam>
        </member>
        <member name="T:Grpc.Core.ServerPort">
            <summary>
            A port exposed by a server.
            </summary>
        </member>
        <member name="F:Grpc.Core.ServerPort.PickUnused">
            <summary>
            Pass this value as port to have the server choose an unused listening port for you.
            Ports added to a server will contain the bound port in their <see cref="P:Grpc.Core.ServerPort.BoundPort"/> property.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerPort.#ctor(System.String,System.Int32,Grpc.Core.ServerCredentials)">
            <summary>
            Creates a new port on which server should listen.
            </summary>
            <returns>The port on which server will be listening.</returns>
            <param name="host">the host</param>
            <param name="port">the port. If zero, an unused port is chosen automatically.</param>
            <param name="credentials">credentials to use to secure this port.</param>
        </member>
        <member name="M:Grpc.Core.ServerPort.#ctor(Grpc.Core.ServerPort,System.Int32)">
            <summary>
            Creates a port from an existing <c>ServerPort</c> instance and boundPort value.
            </summary>
        </member>
        <member name="P:Grpc.Core.ServerPort.Host">
            <value>The host.</value>
        </member>
        <member name="P:Grpc.Core.ServerPort.Port">
            <value>The port.</value>
        </member>
        <member name="P:Grpc.Core.ServerPort.Credentials">
            <value>The server credentials.</value>
        </member>
        <member name="P:Grpc.Core.ServerPort.BoundPort">
            <value>
            The port actually bound by the server. This is useful if you let server
            pick port automatically. <see cref="F:Grpc.Core.ServerPort.PickUnused"/>
            </value>
        </member>
        <member name="T:Grpc.Core.ServerServiceDefinition">
            <summary>
            Mapping of method names to server call handlers.
            Normally, the <c>ServerServiceDefinition</c> objects will be created by the <c>BindService</c> factory method 
            that is part of the autogenerated code for a protocol buffers service definition.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.CreateBuilder">
            <summary>
            Creates a new builder object for <c>ServerServiceDefinition</c>.
            </summary>
            <returns>The builder object.</returns>
        </member>
        <member name="T:Grpc.Core.ServerServiceDefinition.Builder">
            <summary>
            Builder class for <see cref="T:Grpc.Core.ServerServiceDefinition"/>.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.#ctor">
            <summary>
            Creates a new instance of builder.
            </summary>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.UnaryServerMethod{``0,``1})">
            <summary>
            Adds a definition for a single request - single response method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
            <returns>This builder instance.</returns>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ClientStreamingServerMethod{``0,``1})">
            <summary>
            Adds a definition for a client streaming method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
            <returns>This builder instance.</returns>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ServerStreamingServerMethod{``0,``1})">
            <summary>
            Adds a definition for a server streaming method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
            <returns>This builder instance.</returns>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.DuplexStreamingServerMethod{``0,``1})">
            <summary>
            Adds a definition for a bidirectional streaming method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
            <returns>This builder instance.</returns>
        </member>
        <member name="M:Grpc.Core.ServerServiceDefinition.Builder.Build">
            <summary>
            Creates an immutable <c>ServerServiceDefinition</c> from this builder.
            </summary>
            <returns>The <c>ServerServiceDefinition</c> object.</returns>
        </member>
        <member name="T:Grpc.Core.ServiceBinderBase">
            <summary>
            Allows binding server-side method implementations in alternative serving stacks.
            Instances of this class are usually populated by the <c>BindService</c> method
            that is part of the autogenerated code for a protocol buffers service definition.
            <seealso cref="T:Grpc.Core.ServerServiceDefinition"/>
            </summary>
        </member>
        <member name="M:Grpc.Core.ServiceBinderBase.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.UnaryServerMethod{``0,``1})">
            <summary>
            Adds a definition for a single request - single response method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
        </member>
        <member name="M:Grpc.Core.ServiceBinderBase.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ClientStreamingServerMethod{``0,``1})">
            <summary>
            Adds a definition for a client streaming method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
        </member>
        <member name="M:Grpc.Core.ServiceBinderBase.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.ServerStreamingServerMethod{``0,``1})">
            <summary>
            Adds a definition for a server streaming method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
        </member>
        <member name="M:Grpc.Core.ServiceBinderBase.AddMethod``2(Grpc.Core.Method{``0,``1},Grpc.Core.DuplexStreamingServerMethod{``0,``1})">
            <summary>
            Adds a definition for a bidirectional streaming method.
            </summary>
            <typeparam name="TRequest">The request message class.</typeparam>
            <typeparam name="TResponse">The response message class.</typeparam>
            <param name="method">The method.</param>
            <param name="handler">The method handler.</param>
        </member>
        <member name="T:Grpc.Core.Status">
            <summary>
            Represents RPC result, which consists of <see cref="P:Grpc.Core.Status.StatusCode"/> and an optional detail string. 
            </summary>
        </member>
        <member name="F:Grpc.Core.Status.DefaultSuccess">
            <summary>
            Default result of a successful RPC. StatusCode=OK, empty details message.
            </summary>
        </member>
        <member name="F:Grpc.Core.Status.DefaultCancelled">
            <summary>
            Default result of a cancelled RPC. StatusCode=Cancelled, empty details message.
            </summary>
        </member>
        <member name="M:Grpc.Core.Status.#ctor(Grpc.Core.StatusCode,System.String)">
            <summary>
            Creates a new instance of <c>Status</c>.
            </summary>
            <param name="statusCode">Status code.</param>
            <param name="detail">Detail.</param>
        </member>
        <member name="P:Grpc.Core.Status.StatusCode">
            <summary>
            Gets the gRPC status code. OK indicates success, all other values indicate an error.
            </summary>
        </member>
        <member name="P:Grpc.Core.Status.Detail">
            <summary>
            Gets the detail.
            </summary>
        </member>
        <member name="M:Grpc.Core.Status.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Grpc.Core.Status"/>.
            </summary>
        </member>
        <member name="T:Grpc.Core.StatusCode">
            <summary>
            Result of a remote procedure call.
            Based on grpc_status_code from grpc/status.h
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.OK">
            <summary>Not an error; returned on success.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Cancelled">
            <summary>The operation was cancelled (typically by the caller).</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Unknown">
            <summary>
            Unknown error.  An example of where this error may be returned is
            if a Status value received from another address space belongs to
            an error-space that is not known in this address space.  Also
            errors raised by APIs that do not return enough error information
            may be converted to this error.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.InvalidArgument">
            <summary>
            Client specified an invalid argument.  Note that this differs
            from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
            that are problematic regardless of the state of the system
            (e.g., a malformed file name).
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.DeadlineExceeded">
            <summary>
            Deadline expired before operation could complete.  For operations
            that change the state of the system, this error may be returned
            even if the operation has completed successfully.  For example, a
            successful response from a server could have been delayed long
            enough for the deadline to expire.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.NotFound">
            <summary>Some requested entity (e.g., file or directory) was not found.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.AlreadyExists">
            <summary>Some entity that we attempted to create (e.g., file or directory) already exists.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.PermissionDenied">
            <summary>
            The caller does not have permission to execute the specified
            operation.  PERMISSION_DENIED must not be used for rejections
            caused by exhausting some resource (use RESOURCE_EXHAUSTED
            instead for those errors).  PERMISSION_DENIED must not be
            used if the caller can not be identified (use UNAUTHENTICATED
            instead for those errors).
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Unauthenticated">
            <summary>The request does not have valid authentication credentials for the operation.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.ResourceExhausted">
            <summary>
            Some resource has been exhausted, perhaps a per-user quota, or
            perhaps the entire file system is out of space.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.FailedPrecondition">
            <summary>
            Operation was rejected because the system is not in a state
            required for the operation's execution.  For example, directory
            to be deleted may be non-empty, an rmdir operation is applied to
            a non-directory, etc.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Aborted">
            <summary>
            The operation was aborted, typically due to a concurrency issue
            like sequencer check failures, transaction aborts, etc.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.OutOfRange">
            <summary>
            Operation was attempted past the valid range.  E.g., seeking or
            reading past end of file.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Unimplemented">
            <summary>Operation is not implemented or not supported/enabled in this service.</summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Internal">
            <summary>
            Internal errors.  Means some invariants expected by underlying
            system has been broken.  If you see one of these errors,
            something is very broken.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.Unavailable">
            <summary>
            The service is currently unavailable.  This is a most likely a
            transient condition and may be corrected by retrying with
            a backoff.
            </summary>
        </member>
        <member name="F:Grpc.Core.StatusCode.DataLoss">
            <summary>Unrecoverable data loss or corruption.</summary>
        </member>
        <member name="T:Grpc.Core.Utils.AsyncStreamExtensions">
            <summary>
            Extension methods that simplify work with gRPC streaming calls.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.AsyncStreamExtensions.ForEachAsync``1(Grpc.Core.IAsyncStreamReader{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Reads the entire stream and executes an async action for each element.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.AsyncStreamExtensions.ToListAsync``1(Grpc.Core.IAsyncStreamReader{``0})">
            <summary>
            Reads the entire stream and creates a list containing all the elements read.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.AsyncStreamExtensions.WriteAllAsync``1(Grpc.Core.IClientStreamWriter{``0},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Writes all elements from given enumerable to the stream.
            Completes the stream afterwards unless close = false.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.AsyncStreamExtensions.WriteAllAsync``1(Grpc.Core.IServerStreamWriter{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes all elements from given enumerable to the stream.
            </summary>
        </member>
        <member name="T:Grpc.Core.Utils.BenchmarkUtil">
            <summary>
            Utility methods to run microbenchmarks.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.BenchmarkUtil.RunBenchmark(System.Int32,System.Int32,System.Action)">
            <summary>
            Runs a simple benchmark preceded by warmup phase.
            </summary>
        </member>
        <member name="T:Grpc.Core.Utils.GrpcPreconditions">
            <summary>
            Utility methods to simplify checking preconditions in the code.
            </summary>
        </member>
        <member name="M:Grpc.Core.Utils.GrpcPreconditions.CheckArgument(System.Boolean)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> if condition is false.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Grpc.Core.Utils.GrpcPreconditions.CheckArgument(System.Boolean,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentException"/> with given message if condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Grpc.Core.Utils.GrpcPreconditions.CheckNotNull``1(``0)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if reference is null.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Grpc.Core.Utils.GrpcPreconditions.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if reference is null.
            </summary>
            <param name="reference">The reference.</param>
            <param name="paramName">The parameter name.</param>
        </member>
        <member name="M:Grpc.Core.Utils.GrpcPreconditions.CheckState(System.Boolean)">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> if condition is false.
            </summary>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:Grpc.Core.Utils.GrpcPreconditions.CheckState(System.Boolean,System.String)">
            <summary>
            Throws <see cref="T:System.InvalidOperationException"/> with given message if condition is false.
            </summary>
            <param name="condition">The condition.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="T:Grpc.Core.Utils.TaskUtils">
            <summary>
            Utility methods for task parallel library.
            </summary>
        </member>
        <member name="P:Grpc.Core.Utils.TaskUtils.CompletedTask">
            <summary>
            Framework independent equivalent of <c>Task.CompletedTask</c>.
            </summary>
        </member>
        <member name="T:Grpc.Core.VersionInfo">
            <summary>
            Provides info about current version of gRPC.
            See https://codingforsmarties.wordpress.com/2016/01/21/how-to-version-assemblies-destined-for-nuget/
            for rationale about assembly versioning.
            </summary>
        </member>
        <member name="F:Grpc.Core.VersionInfo.CurrentAssemblyVersion">
            <summary>
            Current <c>AssemblyVersion</c> attribute of gRPC C# assemblies
            </summary>
        </member>
        <member name="F:Grpc.Core.VersionInfo.CurrentAssemblyFileVersion">
            <summary>
            Current <c>AssemblyFileVersion</c> of gRPC C# assemblies
            </summary>
        </member>
        <member name="F:Grpc.Core.VersionInfo.CurrentVersion">
            <summary>
            Current version of gRPC C#
            </summary>
        </member>
        <member name="T:Grpc.Core.WriteFlags">
            <summary>
            Flags for write operations.
            </summary>
        </member>
        <member name="F:Grpc.Core.WriteFlags.BufferHint">
            <summary>
            Hint that the write may be buffered and need not go out on the wire immediately.
            gRPC is free to buffer the message until the next non-buffered
            write, or until write stream completion, but it need not buffer completely or at all.
            </summary>
        </member>
        <member name="F:Grpc.Core.WriteFlags.NoCompress">
            <summary>
            Force compression to be disabled for a particular write.
            </summary>
        </member>
        <member name="T:Grpc.Core.WriteOptions">
            <summary>
            Options for write operations.
            </summary>
        </member>
        <member name="F:Grpc.Core.WriteOptions.Default">
            <summary>
            Default write options.
            </summary>
        </member>
        <member name="M:Grpc.Core.WriteOptions.#ctor(Grpc.Core.WriteFlags)">
            <summary>
            Initializes a new instance of <c>WriteOptions</c> class.
            </summary>
            <param name="flags">The write flags.</param>
        </member>
        <member name="P:Grpc.Core.WriteOptions.Flags">
            <summary>
            Gets the write flags.
            </summary>
        </member>
    </members>
</doc>
